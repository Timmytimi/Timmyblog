import{_ as i,o as s,c as l,a as t}from"./app-n_xefxOj.js";const a="/Timmyblog/assets/1692749703955.efb73586-4Be4IAei.png",n="/Timmyblog/assets/1692757719950.24782057-lsVkXUo7.png",e="/Timmyblog/assets/1692757752624.4c7722db-qBL3Efn3.png",o="/Timmyblog/assets/1692757870438.ac7f4713-5FKuVcII.png",p="/Timmyblog/assets/1692757964557.c6d26139-ugyV6v_9.png",r="/Timmyblog/assets/1692759025489.e4c41a07-s6DlgKMe.png",c="/Timmyblog/assets/1692759144421.9e3c0f78-mnaFj4WH.png",m="/Timmyblog/assets/1692759332854.bea9b398-VhPB9uWs.png",g="/Timmyblog/assets/1692759477375.87fc7e92-MLZMT5BI.png",d="/Timmyblog/assets/1692761024117.82c96aa0-1fwa-yes.png",h="/Timmyblog/assets/1692761101126.c195193d-01M50Rh8.png",b="/Timmyblog/assets/1692761286534.d0e297ed-XAaefUji.png",_="/Timmyblog/assets/1692761629684.7bf3465f-HJjLnxYs.png",f="/Timmyblog/assets/1692762074124.2bbb5910-swVJPOMU.png",u="/Timmyblog/assets/1692774176307.a392c427-_RSwlnPM.png",y="/Timmyblog/assets/1692774417733.6831dc94-8XVRXr3W.png",x="/Timmyblog/assets/1692774706747.7c5d4e1c-qD4iUsz5.png",v="/Timmyblog/assets/1692774726365.61cde9fd-yHnVR3Y0.png",T="/Timmyblog/assets/1692774934027.3eaf8bdc-uWDr4z8p.png",S="/Timmyblog/assets/1692774954288.b9a074f3-EK4DY3EK.png",k="/Timmyblog/assets/1692775100182.ca9bf35b-yy48CN4E.png",C="/Timmyblog/assets/1692775361419.30f785c8-bferPg_N.png",w="/Timmyblog/assets/1692775391950.028bfb68-8v1il3y7.png",z="/Timmyblog/assets/1692775748069.41bd79c0-mxU9U7QL.png",I="/Timmyblog/assets/1692775963795.187916ed-XGuwX-tS.png",V="/Timmyblog/assets/1692776154971.31f3b01d-aVjLzV-q.png",B="/Timmyblog/assets/1692776384746.419974c2-2w94ZBT2.png",E="/Timmyblog/assets/1692776458358.79d35e5a-B-PO4vif.png",L="/Timmyblog/assets/1692776678392.3a8259d5-61WLpj2I.png",D="/Timmyblog/assets/1692841464505.379e2828-mKrnfPbl.png",M="/Timmyblog/assets/1692776784011.4a34539c-uJnL2tw6.png",K="/Timmyblog/assets/1692841658439.da5ca0ba--TqKxDwu.png",R="/Timmyblog/assets/1692841916352.1af8d941-JAO2YrrC.png",H="/Timmyblog/assets/1692843658089.f6c6c876-QEmowTOz.png",U="/Timmyblog/assets/1692843786594.dd5257a9-9A_vx7LZ.png",X="/Timmyblog/assets/1692843821667.267d6f06-yoH-aoKQ.png",P="/Timmyblog/assets/1692843900087.3c02701f-xPVdvtEI.png",j="/Timmyblog/assets/1692844066128.cb899763-ZQVlNKg0.png",A="/Timmyblog/assets/1692844221762.869f6821-6gPIoST0.png",J="/Timmyblog/assets/1692844363054.1576cf5f-03ZU1Zmz.png",Q="/Timmyblog/assets/1692844447535.8fb5d062-AYlCrDW5.png",W="/Timmyblog/assets/1692844495563.ecc06f4f-rnQhoYlC.png",Y="/Timmyblog/assets/1692844747332.a1b2566b-JvhHk8sr.png",N="/Timmyblog/assets/1692845007399.c870cb47-zuKpJV86.png",O="/Timmyblog/assets/1692845278177.8f0cafb6-U0kQxA2p.png",Z="/Timmyblog/assets/1692846301681.9c5cf98b-4xvX_Mww.png",G="/Timmyblog/assets/1692846455366.baf364ca-74HEThda.png",q="/Timmyblog/assets/1692846516420.63bc9b89-hYKYfdzO.png",F="/Timmyblog/assets/1692847064887.da8e12b4-gaE2r2pU.png",$="/Timmyblog/assets/1692847117432.4631fae8-bdHjmVs4.png",ii="/Timmyblog/assets/1692847834215.b7d5dabe-JxDeZmgw.png",si="/Timmyblog/assets/1692847974368.bd3fc152-gvniEuBF.png",li="/Timmyblog/assets/1692848198430.8a339570-__8353tI.png",ti="/Timmyblog/assets/1692860034796.cda5ce08-lBReDmDN.png",ai="/Timmyblog/assets/1692860391559.3e6a8214-wYNnleNx.png",ni="/Timmyblog/assets/1692860640724.82ebfdc6-IWMSQXU4.png",ei="/Timmyblog/assets/1692860742871.3a0a0d74-DrpwWIF0.png",oi="/Timmyblog/assets/1692860811965.70dc97dc-sGIOyn0s.png",pi="/Timmyblog/assets/1692860996568.af278278-qrSjgVm7.png",ri="/Timmyblog/assets/1692861422881.a2f6b042-7eWsVLXN.png",ci="/Timmyblog/assets/1692861548379.5e36b848-XpA4s7Ky.png",mi="/Timmyblog/assets/1692861763407.ac2952c0-M9EPQ15m.png",gi="/Timmyblog/assets/1692862010561.6faf2288-vsRR3pKb.png",di="/Timmyblog/assets/1692862259079.28b8fb3b-kQnPhAZx.png",hi="/Timmyblog/assets/1692863664422.8203e711-8D2EUEHn.png",bi="/Timmyblog/assets/1692863821180.dc0aa524-L0X-BRqp.png",_i="/Timmyblog/assets/1692863975706.137dbb81-8ItRJOX2.png",fi="/Timmyblog/assets/1692864196545.cfa52e6b-Es8GM566.png",ui="/Timmyblog/assets/1692864288189.a364bc2d-e5UT8a6K.png",yi={},xi=t('<h1 id="网页样式css" tabindex="-1"><a class="header-anchor" href="#网页样式css" aria-hidden="true">#</a> 网页样式CSS</h1><p>目标：https://yujingbo1023.github.io/xm/</p><p>自制小米官网</p><p><img src="'+a+'" alt="1692749703955"></p><h2 id="_1-什么是css" tabindex="-1"><a class="header-anchor" href="#_1-什么是css" aria-hidden="true">#</a> 1.什么是CSS？</h2><p>CSS表示层叠样式表（Cascading Style Sheet，简称：CSS，又称为又称串样式列表、级联样式表、串接样式表、阶层式样式表）是为网页添加样式的代码。<strong>CSS并不是一门编程语言，是样式语言</strong>。作用就是进行网页布局和美化网页。</p><p><strong>版本</strong></p><ul><li>CSS2 CSS3 先学习CSS2 后面学习CSS3</li><li>HTML1~5 前面也是先学习4 后面学习5</li></ul><p>先快速体验一把CSS，css写在style标签中的，style标签是放在head标签里面，title标签下面，如下：</p><p><img src="'+n+'" alt="1692757719950"></p><p><strong>常见属性</strong>:</p><p><img src="'+e+'" alt="1692757752624"></p><p>继续体验，如下：</p><p><img src="'+o+'" alt="1692757870438"></p><p>注意点及语法规则：</p><ul><li>CSS 标点符号都是英文状态下的</li><li>每一个样式键值对写完之后，最后需要写分号</li><li>每一条属性分属性名和属性值</li></ul><p><img src="'+p+`" alt="1692757964557"></p><ul><li>学习CSS就是去学习一堆的属性和选择器，规则如下：</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
      <span class="token punctuation">{</span><span class="token punctuation">}</span>

      叫声明块 <span class="token property">在声明块中放一个个的属性，属性的格式是：xxx</span><span class="token punctuation">:</span>yyyy<span class="token punctuation">;</span>

      <span class="token selector">每一个属性是以分号结束 属性名也叫键，属性值也叫值。整体也叫键值对。 选择器</span> <span class="token punctuation">{</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          <span class="token property">属性名</span><span class="token punctuation">:</span> 属性值<span class="token punctuation">;</span>
          ...
      <span class="token punctuation">}</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-三种写法" tabindex="-1"><a class="header-anchor" href="#_2-三种写法" aria-hidden="true">#</a> 2.三种写法</h2><p>写CSS，有三种写法：</p><ul><li>内部式：CSS 写在style标签中, 提示：style标签虽然可以写在页面任意位置，但是通常约定写在 head 标签中</li><li>外部式：CSS 写在一个单独的.css文件中, 提示：需要通过link标签在网页中引入</li><li>行内式：CSS 写在标签的style属性中, 提示：之后会配合js使用</li></ul><p><strong>行内样式（inline style）</strong>:</p><ol><li>行内样式（inline style），也有人翻译成行内联式</li><li>行内样式表存在于HTML元素的style属性之中</li><li>CSS样式之间用分号;隔开，建议每条CSS样式后面都加上分号</li><li>在原生的HTML编写过程中确实这种写法是<strong>不推荐</strong>的，之后会配合JS使用</li></ol><p>代码演示：</p><p><img src="`+r+'" alt="1692759025489"></p><p><strong>内部样式/内联写法（internal style sheet）</strong>:</p><ol><li>将CSS放在HTML文件 head元素里的 style元素之中,把css代码写在style标签里面就可以. (用{}括号选中)</li></ol><p>代码演示：</p><p><img src="'+c+'" alt="1692759144421"></p><p><strong>外部样式/外联写法（external style sheet）</strong>:</p><ol><li>外部样式表（external style sheet） 是将css编写一个<strong>独立</strong>的文件中，并且通过元素引入进来</li><li>link元素的作用: 代表资源引入, 不止可以引入css样式,还可以引入其他资源.</li><li>可以在style元素或者CSS文件中使用@import导入其他的CSS文件</li></ol><p>代码演示：</p><p><img src="'+m+'" alt="1692759332854"></p><p><img src="'+g+'" alt="1692759477375"></p><p>总结一把：</p><ul><li>学习时，使用内部样式</li><li>项目时，使用外部样式</li><li>对于行内样式，偶尔也会使用</li></ul><h1 id="css选择器" tabindex="-1"><a class="header-anchor" href="#css选择器" aria-hidden="true">#</a> CSS选择器</h1><p><strong>选择器的作用</strong>：</p><ol><li>选择页面中对应的标签（找她），方便后续设置样式（改她）</li></ol><p><strong>选择器的种类繁多，大概可以这么归类</strong>：</p><ol><li>通用选择器（universal selector）</li><li>元素选择器（type selectors）</li><li>类选择器（class selectors）</li><li>id选择器（id selectors）</li><li>属性选择器（attribute selectors）</li><li>组合（combinators）</li><li>伪类（pseudo-classes）</li><li>伪元素（pseudo-elements）</li></ol><h2 id="_1-css基础选择器" tabindex="-1"><a class="header-anchor" href="#_1-css基础选择器" aria-hidden="true">#</a> 1.CSS基础选择器</h2><p><strong>通用选择器</strong>：</p><ol><li>结构：<strong><u>* { css属性名：属性值； }</u></strong></li><li>通用选择器（universal selector）</li><li>所有的元素都会被选中;</li><li>一般用来给所有元素作一些通用性的设置，比如内边距、外边距，比如重置一些内容</li><li>效率比较低，尽量不要使用;</li></ol><p>代码演示：</p><p><img src="'+d+'" alt="1692761024117"></p><p><strong>简单选择器</strong>：</p><ol><li>简单选择器是开发中用的最多的选择器</li><li>元素选择器（type selectors）, 使用元素的名称</li><li>类选择器（class selectors）, 使用 . 类名</li><li>id选择器（id selectors）, 使用 #id</li></ol><p><img src="'+h+'" alt="1692761101126"></p><p><strong>元素选择器Element Selector</strong>：</p><ol><li>结构：<strong><u>标签名 { css属性名：属性值； }</u></strong></li><li>作用：通过标签名，找到页面中所有这类标签，设置样式</li><li>标签选择器选择的是一类标签，而不是单独某一个</li><li>标签选择器无论嵌套关系有多深，都能找到对应的标签</li></ol><p>代码演示：</p><p><img src="'+b+'" alt="1692761286534"></p><p><strong>类选择器Class Selector</strong>：</p><ol><li>结构：<strong><u>.类名 { css属性名：属性值； }</u></strong></li><li>作用：通过类名，找到页面中所有带有这个类名的标签，设置样式</li><li>所有标签上都有class属性，class属性的属性值称为类名（类似于名字）</li><li>类名可以由数字、字母、下划线、中划线组成，但不能以数字或者中划线开头</li><li>一个标签可以同时有多个类名，类名之间以<em>空格</em>隔开</li><li>类名可以重复，一个类选择器可以同时选中多个标签</li></ol><p>代码演示：</p><p><img src="'+_+'" alt="1692761629684"></p><p><strong>id选择器</strong>：</p><ol><li>结构：#id属性值 { css属性名：属性值； }</li><li>作用：通过id属性值，找到页面中带有这个id属性值的标签，设置样式</li><li>所有标签上都有id属性</li><li>id属性值类似于身份证号码，在一个页面中是唯一的，不可重复的</li><li>一个标签上只能有一个id属性值</li><li>一个id选择器只能选中一个标签</li></ol><p>代码演示：</p><p><img src="'+f+'" alt="1692762074124"></p><p>总结：</p><ul><li>通配符选择器</li><li>标签选择器</li><li>class选择器</li><li>ID选择器</li></ul><h2 id="_2-css高级选择器" tabindex="-1"><a class="header-anchor" href="#_2-css高级选择器" aria-hidden="true">#</a> 2.CSS高级选择器</h2><ol><li>属性选择器（attribute selectors）</li><li>组合（combinators）</li><li>伪类（pseudo-classes）</li><li>伪元素（pseudo-elements）</li></ol><p>PS:#代表常用</p><h3 id="_2-1-属性选择器-attribute-selectors" tabindex="-1"><a class="header-anchor" href="#_2-1-属性选择器-attribute-selectors" aria-hidden="true">#</a> 2.1#属性选择器(attribute selectors)：</h3><ol><li>用**[]中括号**选中某一个属性: [属性名]</li><li>或者属性等于某个值 [att=val]</li><li>[attr*=val]: 属性值包含某一个值val （了解）</li><li>[attr^=val]: 属性值以val开头 （了解）</li><li>[attr$=val]: 属性值以val结尾 （了解）</li><li>[attr|=val]: 属性值等于val或者以val开头后面紧跟连接符 （了解）</li><li>[attr~=val]: 属性值包含val, 如果有其他值必须以空格和val分割 （了解）</li></ol><p>代码演示：</p><p><img src="'+u+'" alt="1692774176307"></p><h3 id="_2-2-后代选择器-descendant-combinator" tabindex="-1"><a class="header-anchor" href="#_2-2-后代选择器-descendant-combinator" aria-hidden="true">#</a> 2.2#后代选择器（descendant combinator）：</h3><ol><li>后代选择器一: 所有的后代(直接/间接的后代)，选择器之间以空格分割</li><li>后代选择器二: 直接子代选择器(必须是直接子代)</li></ol><p>代码演示：</p><p><img src="'+y+'" alt="1692774417733"></p><h3 id="_2-3兄弟选择器-sibling-combinator" tabindex="-1"><a class="header-anchor" href="#_2-3兄弟选择器-sibling-combinator" aria-hidden="true">#</a> 2.3兄弟选择器(sibling combinator)：</h3><ol><li>兄弟选择器一:<strong>相邻</strong>兄弟选择器， 使用符号 <strong>+</strong> 连接</li><li>兄弟选择器二: <strong>所有</strong>兄弟选择器， 使用符号 <strong>~</strong> 连接</li></ol><p>代码演示：</p><p><img src="'+x+'" alt="1692774706747"></p><h3 id="_2-4交集选择器" tabindex="-1"><a class="header-anchor" href="#_2-4交集选择器" aria-hidden="true">#</a> 2.4交集选择器：</h3><ol><li>交集选择器: 需要同时符合两个选择器条件(两个选择器紧密连接)</li><li>在开发中通常为了精准的选择某一个元素</li></ol><p><img src="'+v+'" alt="1692774726365"></p><p>代码演示：</p><p><img src="'+T+'" alt="1692774934027"></p><h3 id="_2-5-并集选择器-群组选择器" tabindex="-1"><a class="header-anchor" href="#_2-5-并集选择器-群组选择器" aria-hidden="true">#</a> 2.5#并集选择器/群组选择器：</h3><ol><li>并集选择器: 符合一个选择器条件即可(两个选择器以**,号**分割)</li><li>逗号与逗号之间的元素没有任何联系</li><li>在开发中通常为了给多个元素设置相同的样式;</li></ol><p><img src="'+S+'" alt="1692774954288"></p><p>代码演示：</p><p><img src="'+k+'" alt="1692775100182"></p><h3 id="_2-6-动态伪类选择器-hover选择器-dynamic-pseudo-classes" tabindex="-1"><a class="header-anchor" href="#_2-6-动态伪类选择器-hover选择器-dynamic-pseudo-classes" aria-hidden="true">#</a> 2.6#动态伪类选择器/hover选择器（dynamic pseudo-classes)：</h3><ol><li>a:hover 鼠标挪动到链接上(重要)</li><li>除了a元素，:hover也能用在其他元素上</li><li>选中鼠标悬停在元素上的状态，设置样式</li><li>伪类选择器选中的元素的某种状态</li><li>很多时候悬在div 就要让a变色,就要和后代选择器连起来</li></ol><p>代码演示：</p><p><img src="'+C+'" alt="1692775361419"></p><p>总结：</p><p><img src="'+w+'" alt="1692775391950"></p><p>经常使用的选择：</p><ul><li>标签选择器</li><li>类选择器</li><li>ID选择器</li><li>后代选择器 div p{} div&gt;p{}</li><li>并集选择器 div, p, .box{}</li><li>交集选择器 div.item{}</li><li>hover选择器</li></ul><h1 id="字体和文本相关的属性" tabindex="-1"><a class="header-anchor" href="#字体和文本相关的属性" aria-hidden="true">#</a> 字体和文本相关的属性</h1><h2 id="_1-css颜色表示法" tabindex="-1"><a class="header-anchor" href="#_1-css颜色表示法" aria-hidden="true">#</a> 1.CSS颜色表示法</h2><p>有两种颜色表示法：</p><ul><li>使用单词表示，不能表示所有的颜色</li><li>RGB表示，RGB是一种色彩空间，通过R（red，红色）、G（green，绿色）、B（blue，蓝色）三原色来组成了不同的颜色，通过调整这三个颜色不同的比例，就可以组合成其它的颜色。</li></ul><p><img src="'+z+'" alt="1692775748069"></p><p>使用RGB表示，又有两种形式表示：</p><ul><li>rgb函数 或 rgba函数 rgb(0, 0, 0) rgb(255, 255, 255) rgb(255, 0, 0) rgba(255, 0, 0, 0.5)</li><li>16进制表示 以#打头 #000000 #ffffff #ff0000 #f00 #0f0 #00f</li></ul><p>总结：</p><p><img src="'+I+'" alt="1692775963795"></p><p>代码演示：</p><p><img src="'+V+'" alt="1692776154971"></p><h2 id="_2-chrome浏览器开发者工具-掌握" tabindex="-1"><a class="header-anchor" href="#_2-chrome浏览器开发者工具-掌握" aria-hidden="true">#</a> 2.Chrome浏览器开发者工具(掌握)</h2><ol><li>打开Chrome调试工具，方式一：右键 – 检查，方式二：快捷键 – F12</li><li>快捷键：ctrl+ 可以调整页面或者调试工具的字体大小</li><li>可以通过删除某些元素来查看网页结构</li><li>可以通过增删css来调试网页样式</li></ol><p><img src="'+B+'" alt="1692776384746"></p><p>代码如下：</p><p><img src="'+E+'" alt="1692776458358"></p><p>开始调试：</p><p><img src="'+L+'" alt="1692776678392"></p><p><img src="'+D+'" alt="1692841464505"></p><p>总结：</p><p><img src="'+M+'" alt="1692776784011"></p><h2 id="_3-字体相关的样式" tabindex="-1"><a class="header-anchor" href="#_3-字体相关的样式" aria-hidden="true">#</a> 3.字体相关的样式</h2><h3 id="a-font-size" tabindex="-1"><a class="header-anchor" href="#a-font-size" aria-hidden="true">#</a> a) #font-size</h3><ol><li>font-size决定文字的大小</li><li>常用的设置：具体数值+单位</li><li>谷歌浏览器默认文字大小是16px</li><li>单位需要设置，否则无效</li><li>常用的设置：百分比，基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li><li>font-size有继承性。</li></ol><p>代码演示：</p><p><img src="'+K+'" alt="1692841658439"></p><p><img src="'+R+'" alt="1692841916352"></p><h3 id="b-font-family" tabindex="-1"><a class="header-anchor" href="#b-font-family" aria-hidden="true">#</a> b) font-family</h3><ol><li>font-family用于设置文字的字体名称</li><li>可以设置1个或者多个字体名称</li><li>浏览器会选择列表中第一个该计算机上有安装的字体</li><li>渲染规则：从左往右按照顺序查找，如果电脑中未安装该字体，则显示下一个字体，如果都不支持，此时会根据操作系统，显示最后字体系列的默认字体</li><li>如果字体名称中存在多个单词，推荐使用引号包裹</li><li>网页开发时，尽量使用系统常见自带字体，保证不同用户浏览网页都可以正确显示</li><li>window上默认字体是微雅黑，macOs上默认字体是苹方</li><li>程序员决定不了，使用什么样的字体，由设计师决定。</li><li>也有继承性，一般情况下，都是给body设置。</li></ol><p>代码演示：</p><p><img src="'+H+'" alt="1692843658089"></p><p>看一些网站设置的字体，如下：</p><p><img src="'+U+'" alt="1692843786594"></p><p><img src="'+X+'" alt="1692843821667"></p><h3 id="c-font-weight" tabindex="-1"><a class="header-anchor" href="#c-font-weight" aria-hidden="true">#</a> c) font-weight</h3><ol><li>font-weight用于设置文字的粗细（重量）</li><li>常见的取值：normal：等于400</li><li>常见的取值：bold：等于700</li><li>100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 ：每一个数字表示一个重量</li><li>strong、b、h1~h6等标签的font-weight默认就是bold</li><li>不是所有字体都提供了九种粗细，因此部分取值页面中无变化</li><li>实际开发中以：正常、加粗两种取值使用最多</li></ol><p><img src="'+P+'" alt="1692843900087"></p><p>直接上代码：</p><p><img src="'+j+'" alt="1692844066128"></p><h3 id="d-font-style" tabindex="-1"><a class="header-anchor" href="#d-font-style" aria-hidden="true">#</a> d) font-style</h3><ol><li>font-style用于设置文字的常规、斜体显示</li><li>normal：常规显示</li><li>italic(斜体)：用字体的斜体显示(通常会有专门的字体)</li><li>em、i、cite、address、var、dfn等元素的font-style默认就是italic</li></ol><p>代码演示：</p><p><img src="'+A+'" alt="1692844221762"></p><h3 id="e-font-variant-仅做了解" tabindex="-1"><a class="header-anchor" href="#e-font-variant-仅做了解" aria-hidden="true">#</a> e) font-variant/仅做了解</h3><ol><li>font-variant可以影响小写字母的显示形式，variant是变形的意思;</li><li>normal：常规显示，small-caps：将小写字母替换为缩小过的大写字母</li></ol><p>代码演示：</p><p><img src="'+J+'" alt="1692844363054"></p><h3 id="f-line-height" tabindex="-1"><a class="header-anchor" href="#f-line-height" aria-hidden="true">#</a> f) #line-height</h3><ol><li>line-height用于设置文本的行高(行间距)</li><li>行高可以先简单理解为一行文字所占据的高度</li><li>取值：数字+px</li><li>取值：倍数（当前标签font-size的倍数）</li><li>网页精准布局时，会设置 line-height : 1 可以取消上下间距</li><li>行高的严格定义是：两行文字基线（baseline）之间的间距</li><li>基线（baseline）：与小写字母x最底部对齐的线</li></ol><p><img src="'+Q+'" alt="1692844447535"></p><p><img src="'+W+'" alt="1692844495563"></p><p>代码演示：</p><p><img src="'+Y+'" alt="1692844747332"></p><p><strong>区分height和line-height的区别</strong>：</p><ol><li>height：元素的整体高度</li><li>line-height：元素中每一行文字所占据的高度</li><li>应用实例：假设div中只有一行文字，如何让这行文字在div内部垂直居中？答：让line-height等同于height</li></ol><p>代码演示：</p><p><img src="'+N+'" alt="1692845007399"></p><h3 id="g-font-一般不用" tabindex="-1"><a class="header-anchor" href="#g-font-一般不用" aria-hidden="true">#</a> g) font(一般不用)</h3><ol><li>font是一个缩写属性</li><li>font 属性可以用来作为 font-style, font-variant, font-weight, font-size, line-height 和 font-family 属性的简写</li><li>font-style、font-variant、font-weight可以随意调换顺序，也可以省略</li><li>line-height可以省略，如果不省略，必须跟在font-size后面</li><li>font-size、font-family不可以调换顺序，不可以省略</li></ol><p>代码演示：</p><p><img src="'+O+'" alt="1692845278177"></p><h2 id="_4-文本相关的样式" tabindex="-1"><a class="header-anchor" href="#_4-文本相关的样式" aria-hidden="true">#</a> 4.文本相关的样式</h2><h3 id="a-text-decoration" tabindex="-1"><a class="header-anchor" href="#a-text-decoration" aria-hidden="true">#</a> a) text-decoration</h3><ol><li>text-decoration用于设置文字的装饰线</li><li>decoration是装饰/装饰品的意思;</li><li>decoration取值：none，无任何装饰线，可以去除a元素默认的下划线</li><li>decoration取值：underline，下划线</li><li>decoration取值：overline，上划线</li><li>decoration取值：line-through，中划线（删除线）</li><li>a元素有下划线的本质是被添加了text-decoration属性</li><li>开发中会使用 text-decoration : none ; 清除a标签默认的下划线</li></ol><p>代码演示：</p><p><img src="'+Z+'" alt="1692846301681"></p><h3 id="b-text-transform" tabindex="-1"><a class="header-anchor" href="#b-text-transform" aria-hidden="true">#</a> b) text-transform</h3><ol><li>text-transform用于设置文字的大小写转换</li><li>text-transform取值：capitalize(使…首字母大写, 资本化的意思)将每个单词的首字符变为大写</li><li>text-transform取值：uppercase(大写字母)将每个单词的所有字符变为大写</li><li>text-transform取值：lowercase(小写字母)将每个单词的所有字符变为小写</li><li>text-transform取值：none：没有任何影响</li></ol><p>代码演示：</p><p><img src="'+G+'" alt="1692846455366"></p><h3 id="c-text-indent" tabindex="-1"><a class="header-anchor" href="#c-text-indent" aria-hidden="true">#</a> c) text-indent</h3><ol><li>text-indent用于设置第一行内容的缩进</li><li>取值：数字+px</li><li>取值：数字+em（推荐：1em = 当前标签的font-size的大小）</li><li>text-indent: 2em; 刚好是缩进2个文字</li></ol><p><img src="'+q+'" alt="1692846516420"></p><p>代码演示：</p><p><img src="'+F+'" alt="1692847064887"></p><h3 id="d-text-align" tabindex="-1"><a class="header-anchor" href="#d-text-align" aria-hidden="true">#</a> d) text-align</h3><ol><li>text-align: 直接翻译过来设置文本的对齐方式</li><li>如果需要让文本水平居中，text-align属性给文本所在标签（文本的父元素）设置</li><li>取值：left 左对齐</li><li>取值：right 右对齐</li><li>取值：正中间显示</li><li>取值：两端对齐</li></ol><p><img src="'+$+'" alt="1692847117432"></p><p>代码演示：</p><p><img src="'+ii+'" alt="1692847834215"></p><p><img src="'+si+'" alt="1692847974368"></p><p><strong>text-align : center 能让哪些元素水平居中？</strong></p><ol><li>文本</li><li>span标签、a标签</li><li>input标签、img标签</li><li>这个属性有继承性</li></ol><h3 id="e-letter-spacing、word-spacing" tabindex="-1"><a class="header-anchor" href="#e-letter-spacing、word-spacing" aria-hidden="true">#</a> e) <strong>letter-spacing、word-spacing</strong></h3><ol><li>letter-spacing、word-spacing分别用于设置字母、单词之间的间距</li><li>默认是0，可以设置为负数</li></ol><p>代码演示：</p><p><img src="'+li+'" alt="1692848198430"></p><h2 id="_5-css继承性" tabindex="-1"><a class="header-anchor" href="#_5-css继承性" aria-hidden="true">#</a> 5.CSS继承性</h2><p><strong>继承性(Inherited)</strong>：</p><ol><li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性</li><li>如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高)</li><li>常见的font-size/font-family/font-weight/line-height/color/text-align都具有继承性</li><li>可以通过调试工具判断样式是否可以继承</li><li>好处：可以在一定程度上减少代码 、</li></ol><p><img src="'+ti+'" alt="1692860034796"></p><p>通过调试工具判断样式是否可以继承，代码演示：</p><p><img src="'+ai+'" alt="1692860391559"></p><p>对于a标签中文本的颜色，继承不了的，如下：</p><p><img src="'+ni+'" alt="1692860640724"></p><p><img src="'+ei+'" alt="1692860742871"></p><p>如果是其它标签是可以继承的，如下：</p><p><img src="'+oi+'" alt="1692860811965"></p><p>强制继承，了解，有些属性是不能继承的，但是可以强制继承，如下：</p><p><img src="'+pi+'" alt="1692860996568"></p><p><strong>继承失效的特殊情况</strong>：</p><ol><li>a标签的color会继承失效，其实color属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了</li><li>h系列标签的font-size会继承失效， 其实font-size属性继承下来了，但是被浏览器默认设置的样式给覆盖掉了</li><li>其它元素有浏览器默认样式，此时继承性依然存在，但是优先显示浏览器的默认样式</li></ol><h2 id="_6-css层叠性" tabindex="-1"><a class="header-anchor" href="#_6-css层叠性" aria-hidden="true">#</a> 6.CSS层叠性</h2><p><strong>层叠性：</strong></p><ol><li>给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</li><li>给同一个标签设置相同的样式 → 此时样式会层叠覆盖 → 最终写在最后的样式会生效</li></ol><p>给同一个标签设置不同的样式 → 此时样式会层叠叠加 → 会共同作用在标签上</p><p><img src="'+ri+'" alt="1692861422881"></p><p>比较ID选择器，CLASS选择器，标签选择器的层叠性，如下：</p><p><img src="'+ci+'" alt="1692861548379"></p><p>接着对比，对比行内样式，内部样式和外部样式的优先级，如下：</p><p><img src="'+mi+'" alt="1692861763407"></p><p>利用important可以强制改变优先级，如下：</p><p><img src="'+gi+'" alt="1692862010561"></p><p>对于后代选择器，需要考虑权重值，如下：</p><p><img src="'+di+'" alt="1692862259079"></p><p>后面写项目时，如果效果和你想的不一样，需要考虑继承性和层叠性。你要检查你是不是对同一个元素通过没的选择器，设置了相同的样式。</p><h2 id="_7-元素的类型" tabindex="-1"><a class="header-anchor" href="#_7-元素的类型" aria-hidden="true">#</a> 7.元素的类型</h2><p><strong>元素的类型</strong>：</p><ol><li>块级元素（block-level elements）: 独占父元素的一行 男标签</li><li>行内级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示 女标签</li><li>行内块级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示 人妖标签</li></ol><p><strong>块级元素</strong>：</p><ol><li>独占一行（一行只能显示一个）</li><li>宽度默认是父元素的宽度，高度默认由内容撑开</li><li>可以设置宽高</li><li>标签：div、p、h系列、ul、li、dl、dt、dd、form、header、nav、footer……</li></ol><p>代码演示：</p><p><img src="'+hi+'" alt="1692863664422"></p><p><strong>行内元素</strong>：</p><ol><li>一行可以显示多个 ，并排显示</li><li>宽度和高度默认由内容撑开</li><li>不可以设置宽高</li><li>标签：a、span 、b、u、i、s、strong、ins、em、del……</li></ol><p>代码演示：</p><p><img src="'+bi+'" alt="1692863821180"></p><p><strong>行内块元素</strong>：</p><ol><li>一行可以显示多个 ，并排显示。除了可以并排显示之外，其它特性和男标签一样。</li><li>可以设置宽高</li><li>特殊情况：img标签有行内块元素特点，但是Chrome调试工具中显示结果是inline</li><li>标签：input、textarea、button、select……</li></ol><p>代码演示：</p><p><img src="'+_i+'" alt="1692863975706"></p><p>通过一个属性，叫display，可以改变标签的性别</p><ul><li>block：让元素显示为块级元素</li><li>inline：让元素显示为行内级元素</li><li>inline-block：让元素同时具备行内级、块级元素的特征</li><li>none：隐藏元素</li></ul><p>代码演示：</p><p><img src="'+fi+'" alt="1692864196545"></p><p>总结：</p><p><img src="'+ui+'" alt="1692864288189"></p><h1 id="作业" tabindex="-1"><a class="header-anchor" href="#作业" aria-hidden="true">#</a> 作业</h1><p>1，网页的三大组成部分是哪些？分别说出他们的作用。</p><p>2，元素的结构是什么？有哪些单标签元素、双标签元素？</p><p>3，实现如下效果（a标签跳转）</p>',238),vi=[xi];function Ti(Si,ki){return s(),l("div",null,vi)}const wi=i(yi,[["render",Ti],["__file","02.html.vue"]]);export{wi as default};
