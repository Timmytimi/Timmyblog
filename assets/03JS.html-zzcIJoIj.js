import{_ as n,o as s,c as a,e as p}from"./app-HbT6gJn_.js";const t="/Timmyblog/assets/1693444905204.ed7dff65-sU-sXOxd.png",e="/Timmyblog/assets/1693447461610.574b1394-h9IfwNZW.png",o="/Timmyblog/assets/1693447723841.8e9c2384-P3FYC5vM.png",l="/Timmyblog/assets/image-20240312222909248-8JSm6Bsz.png",c="/Timmyblog/assets/1693448050782.86b08ccc-PcKoQMz7.png",i="/Timmyblog/assets/1693448245843.68e109a5-zsLu2w6M.png",u="/Timmyblog/assets/1693449184655.2e5a8889-ym8pJylD.png",r="/Timmyblog/assets/1693449375138.14c766ae-79-Rqln3.png",k="/Timmyblog/assets/1693449463314.79619512-V90QrY05.png",d="/Timmyblog/assets/1693463338534.6ed66878-YbLXhMIb.png",m="/Timmyblog/assets/1693463696231.876ab5c2-TqtBseh_.png",v="/Timmyblog/assets/1693465632988.ac88c138-zgZk8lMJ.png",b="/Timmyblog/assets/1693466066922.fcf10b27-EM-jfABj.png",g="/Timmyblog/assets/1693466289634.a8cad5cc-I7_ZT729.png",h="/Timmyblog/assets/1693466469432.76cd989c-EfcxJoRo.png",f="/Timmyblog/assets/1693466561954.e7413cf6-zN437Xor.png",q="/Timmyblog/assets/1693466714470.8cde4572-4AqJ_TZ_.png",y="/Timmyblog/assets/1693466950112.53ada90b-7lKiiKiP.png",_="/Timmyblog/assets/1693467083481.6288ce5e-7JEctGCp.png",w="/Timmyblog/assets/1693467208860.0be6e2b7--XZ8hdHu.png",j="/Timmyblog/assets/1693450105316.a41c5765-HItn3RW-.png",x="/Timmyblog/assets/1693530256530.445e0cbe-515kOcSD.png",S="/Timmyblog/assets/1693530705150.1b50b3c9-e7zQS69I.png",T="/Timmyblog/assets/1693450613117.80f47fa4-ePy3mEbW.png",N="/Timmyblog/assets/1693450963034.97bdadee-FF_c5oEO.png",J="/Timmyblog/assets/1693451235038.d0883d87-JKb5w65K.png",M="/Timmyblog/assets/1693451559535.cc67491d-CvsrJKwN.png",C="/Timmyblog/assets/1693451688038.3fa317d7-l7ehfq1r.png",B="/Timmyblog/assets/1693451804500.7f66ce73-p01VSYeG.png",D="/Timmyblog/assets/1693894960851.dd815734-gB4RiTjE.png",P="/Timmyblog/assets/1693896849951.cc7627dd-NO8Gf63c.png",O="/Timmyblog/assets/1693896980935.e777e802-EDM6aowJ.png",E="/Timmyblog/assets/1693895568370.ef58c0a9-jFTjZTMe.png",A="/Timmyblog/assets/1693896093620.52f45dca-UMyxELo2.png",$="/Timmyblog/assets/1693896379729.cc6a6c9a-0tUlPdVE.png",H="/Timmyblog/assets/image-20240313143112193-jrlEuqL0.png",U="/Timmyblog/assets/1693898871959.a39ac53c-SjZ-Tc-R.png",X="/Timmyblog/assets/1693899045224.7e1f88ee-NAQXaH0X.png",I="/Timmyblog/assets/1693899168460.bee257ba-0ZWIO2yg.png",G="/Timmyblog/assets/1693899228622.c55f7f10-jc3SoaVf.png",Y={},z=p('<h1 id="javascript基础" tabindex="-1"><a class="header-anchor" href="#javascript基础" aria-hidden="true">#</a> JavaScript基础</h1><h2 id="一-编程语言的介绍" tabindex="-1"><a class="header-anchor" href="#一-编程语言的介绍" aria-hidden="true">#</a> 一，编程语言的介绍</h2><ul><li>软件，是由程序员使用 编程语言 开发出来的一大堆代码的集合。全球的编程语言有2500+多种，常见的编程语言：JavaScript、Java、C#、Python、PHP、C...</li><li>学习编程语言就是学习它的语法，根据语法再去编写相应的软件中的功能。</li></ul><p><img src="'+t+'" alt="1693444905204"></p><p><strong>编程语言分类：</strong></p><ul><li>从翻译的角度来说，分编译型和解释型</li><li>从高低的角度来说，分低级语言和高级语言</li></ul><p><strong>低级语言和高级语言：</strong></p><ul><li>低级编程语言，写出来的代码直接可以被计算机识别。 <ul><li>机器语言：101 001 00001 00010 001000100010001，机器码，交给计算机去执行。</li></ul></li><li>汇编语言，MOV INC ... ，指令，交给计算机去执行。</li><li>高级编程语言，写出来的代码无法直接被计算机识别，但可以通过某中方式将其转换为计算机可以识别的语言。 <ul><li>JS、C、C++、Java、Python、Ruby...，这类编程语言在编写代码时几乎是写英语作文。</li><li>交由相关编译器或解释器翻译成机器码，然后再交给计算机去执行。</li></ul></li></ul><p><strong>编译器和解释器：</strong></p><ul><li>编程语言分编译型的和解释型器，编译型的语言是一次性编译好，解释型语言，边解释边执行。</li><li>编译器/解释器，就是一个 <code>翻译官</code> ，将代码翻译成计算机能够识别的命令。</li><li>wc使用JS开发一个软件，写10000行代码，需要使用JS解释器，翻译成计算机可以识别的命令。</li><li>xq使用Go开发一个软件，写20000行代码，需要使用GO编译器，翻译成计算机可以识别的命令。</li><li>解释器，实时翻译。拿到1000行代码之后，解释一句交给操作系统一句。</li><li>编译器，全文翻译。拿到2000行代码之后会将他编译成一个临时文件（计算机能够识别命令），再把文件交给操作系统去读取。</li><li>JavaScript、Python、PHP、Ruby... 一般称为解释型语言。</li><li>C、C++、Go、Java... 一般称为编译型语言。</li></ul><p><strong>学习编程的本质：</strong></p><ul><li>第一步：选择一门编程语言，在自己电脑上安装此编程语言的编译器或解释器。</li><li>第二步：学习语言的规则，语法规则+业务背景 开发我们需要的软件（代码的集合）</li><li>第三步：使用编译器或解释器去运行自己写的代码。</li></ul><p>简述编译器和解释器的区别和作用。</p><ul><li>编译器和解释器的作用是将各编程语言的代码进行翻译，从而使得计算机能够识别并执行。</li><li>编译器，全文翻译，将代码编译成 <code>临时文件</code> ，再执行临时文件。</li><li>解释器，实时翻译，对代码实行边解释边执行。</li></ul><h2 id="二-javascript介绍" tabindex="-1"><a class="header-anchor" href="#二-javascript介绍" aria-hidden="true">#</a> 二，JavaScript介绍</h2><h3 id="_1-js介绍" tabindex="-1"><a class="header-anchor" href="#_1-js介绍" aria-hidden="true">#</a> 1，JS介绍</h3><p><strong>JS介绍：</strong></p><p>JS是直接可以运行在浏览器上的，因为浏览器内置了JS的解释，是一种高级语言，是解释性语言。也就是我们所谓的脚本语言，所谓的脚本语言，就是不需要编译，由解释器去执行。当然现在JS也可以运行在NODE端，后面说。</p><p><strong>JS作用：</strong></p><ul><li>Web开发</li><li>服务端开发（Node.js）</li><li>桌面程序（Electron）</li><li>App</li><li>控制硬件</li><li>游戏开发</li><li>...</li></ul><p><img src="'+e+'" alt="1693447461610"></p><p><strong>JS组成：</strong></p><ul><li>ECMAScript <ul><li>规定了js基础语法核心知识。</li></ul></li><li>DOM <ul><li>DOM 操作文档，比如对页面元素进行移动、大小、添加删除等操作</li></ul></li><li>BOM <ul><li>BOM 操作浏览器，比如页面弹窗，检测窗口宽度、存储数据到浏览器等等</li></ul></li></ul><p><img src="'+o+`" alt="1693447723841"></p><h3 id="_2-书写js的三种方式" tabindex="-1"><a class="header-anchor" href="#_2-书写js的三种方式" aria-hidden="true">#</a> 2，书写JS的三种方式</h3><p>1.行内写法，这种写法不推荐，了解即可，直接上代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 事件三要素  1)事件源  2)事件类型  3)事件处理程序(监听器) --&gt;</span>
    <span class="token comment">&lt;!-- 事件源:表示事件发生的场所  button为事件源 --&gt;</span>
    <span class="token comment">&lt;!-- 事件类型: click 表示点击事件 on是前缀 onclick表示给button按钮绑定了一个点击事件 --&gt;</span>
    <span class="token comment">&lt;!-- 事件处理程序:当事件发生时要执行的代码 alert(&#39;hello js&#39;) 表示事件处理程序,也叫监听器,作用在浏览器中弹出一个警示框--&gt;</span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello js&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>效果:</p><p><img src="`+l+'" alt="image-20240312222909248"></p><p>总结行内写法的特点：</p><ul><li>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），如：onclick</li><li>可读性差， 在html中编写JS大量代码时，不方便阅读；</li><li>特殊情况下使用</li></ul><p>2.<strong>内部写法</strong>，#最常用，把JS代码写在<code>&lt;script&gt;&lt;/script&gt;</code>标签中，如下：</p><p><img src="'+c+`" alt="1693448050782"></p><p>::: alert表示一个警示框 会阻塞代码向下执行, 只有点击了确定, alert才会执行完毕 :::</p><p>内部写法的点击事件:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 行内写法 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;行内写法&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>点我1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 内部写发 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value javascript language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span>点我2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
  
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      <span class="token comment">//function是声明函数 fn是函数名</span>
        <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token comment">//下面的是函数体</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;hello js&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结内部写法的特点：</p><ul><li>可以把多行JS代码写在script标签中</li><li>scirpt标签可以写在head标签中, 但通常情况下,把script放在body标签里面的<strong>最下面</strong></li></ul><p>3.<strong>外部写法</strong>，项目中常用, 需要单独创建一个JS文件并引入，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>外部写法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>

    <span class="token comment">&lt;!-- 如果使用script标签引入了外部的JS，那么在script标签中不能再写其它的JS代码 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./out.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        <span class="token comment">//无法执行</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;打印语句&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt="1693448245843"></p><p>总结外部写法的特点：</p><ul><li>需要通过script元素的src属性来引入Js文件. 例如<code>&lt;script src=&quot;./out.js&quot;&gt;&lt;/script&gt;</code></li><li>使用外部写法，script标签中就不能写其它代码了，写了也白了</li><li>script标签不能写成单标签</li></ul><h3 id="js的注释语法与快捷键" tabindex="-1"><a class="header-anchor" href="#js的注释语法与快捷键" aria-hidden="true">#</a> JS的注释语法与快捷键</h3><p>单行注释: <code>//</code> 快捷键: <code>ctrl+ /</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// alert(111)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>多行(代码块)注释: <code>/**/</code> 快捷键: <code>alt + shift + a</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 什么是代码块?</span>
<span class="token comment">// {}用来存放代码中的一块代码</span>
<span class="token comment">// 注意:多行注释内可以嵌套单行注释.如下:</span>

<span class="token comment">/*
	function fn() {
		alert(&#39;hello js&#39;)
		// alert(&#39;hello js&#39;)
	}  
*/</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-js的输出与输入" tabindex="-1"><a class="header-anchor" href="#_3-js的输出与输入" aria-hidden="true">#</a> 3，JS的输出与输入</h3><p>为了方便信息的输入输出，JS中提供了一些输入输出语句，其常用的语句如下：</p><p><img src="`+u+`" alt="1693449184655"></p><p>注意：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己看运行时的消息。</p><p>输出语句代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 输出语句1:</span>
<span class="token comment">// 弹出窗口 警示框 掌握!</span>
<span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">&#39;警告一下&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 询问框 仅做了解 多了取消的按钮</span>
<span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">&#39;可以吗&#39;</span><span class="token punctuation">)</span>

<span class="token comment">// 输出语句2:</span>
<span class="token comment">// 输出语句 浏览器控制台打印输出语句  掌握!</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;输出语句&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&#39;警告语句&#39;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;错误语句&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// 变量和纯数字不需要加引号</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 输出语句3:</span>
<span class="token comment">// 在页面上输出 </span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;我是输出语句&#39;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;h1&gt;我是输出语句&lt;/h1&gt;&quot;</span><span class="token punctuation">)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1&gt;我是输出语句&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>

<span class="token comment">// 注意: 使用引号的方式&#39;&#39; &quot;&quot;  \`\`</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&#39;我是&quot;输出&quot;语句&#39;</span><span class="token punctuation">)</span><span class="token comment">//(外单内双)</span>
document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">&quot;我是&#39;输出&#39;语句&quot;</span><span class="token punctuation">)</span><span class="token comment">//(外双内单)</span>

<span class="token comment">// 不能以下写法</span>
<span class="token comment">// document.write(&#39;我是&#39;输出&#39;语句&#39;)</span>
<span class="token comment">// document.write(&quot;我是&quot;输出&quot;语句&quot;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt="1693449375138"></p><p>输入语句代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// prompt 信息输入框  需掌握!</span>
<span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请问今年多大?&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt="1693449463314"></p><h3 id="小练习" tabindex="-1"><a class="header-anchor" href="#小练习" aria-hidden="true">#</a> 小练习</h3><ul><li>在控制台中输出你自己的姓名 和 春眠不觉晓， 出处闻啼鸟， 夜来风雨声， 花落知多少。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Tim&quot;</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;春眠不觉晓， 出处闻啼鸟， 夜来风雨声， 花落知多少。&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="三-变量variable" tabindex="-1"><a class="header-anchor" href="#三-变量variable" aria-hidden="true">#</a> 三，变量Variable</h2><h3 id="_1-什么是变量" tabindex="-1"><a class="header-anchor" href="#_1-什么是变量" aria-hidden="true">#</a> 1，什么是变量</h3><p>在一个软件中有很多数据都是动态变化的，如：</p><ol><li>购物车商品的数量、价格的计算等等；</li><li>一首歌曲播放的时间、进度条、歌词的展示等等；</li><li>微信聊天中消息条数、时间、语音的长度、头像、名称等等；</li><li>游戏中技能的冷却时间、血量、蓝量、buff时间、金币的数量等等；</li></ol><p>可以使用变量来表示一个<strong>可以变化</strong>的数据(值)</p><p>变量由<strong>变量名</strong>和<strong>变量值</strong>组成。变量值就是内存空间中的数据。而变量名就是这个值的别名和外号。</p><p>对变量名的操作 实际上就是对内存空间中的数据的操作</p><p>变量的声明和变量的赋值，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// var:  声明变量的关键字  age: 变量名  18: 变量值</span>
<span class="token comment">// =    赋值运算符 将右边的值赋值给了左边的变量名   (==  ===)</span>
<span class="token comment">// 变量的赋值过程是从右往左的</span>

<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">;</span>
age <span class="token operator">=</span> <span class="token string">&#39;19&#39;</span><span class="token punctuation">;</span> <span class="token comment">//重新赋值</span>

<span class="token comment">// 一个数据值为100, 在内存空间中开辟一个空间将100放入,将这片内存空间命名为score</span>
<span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>
score <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span> <span class="token comment">//重新赋值</span>
<span class="token comment">//也可以让变量对于输入的字符串,并输出显示在console</span>
<span class="token keyword">var</span> uname <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入你的名字&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>uname<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>let也可以</p><p><img src="`+d+'" alt="1693463338534"></p><p>可以声明时直接赋值并运算:</p><p><img src="'+m+`" alt="1693463696231"></p><h3 id="_2-变量的命令规范" tabindex="-1"><a class="header-anchor" href="#_2-变量的命令规范" aria-hidden="true">#</a> 2，变量的命令规范</h3><p>规范：</p><ol><li><p>第一个字符<strong>不能</strong>是数字, <strong>必须</strong>是一个字母、下划线（ _ ）或一个美元符号（ $ ）</p></li><li><p>变量名不能是JS中的关键字和保留字符.如name,class,do</p><p>https://developer.mozilla.org/zh-CN/docs/web/javascript/reference/lexical_grammar</p></li><li><p>变量严格区分大小写</p></li><li><p>赋值 <code>=</code> 两边都加上一个空格, 一条语句结束后加上分号<code>;</code></p></li><li><p>变量应该做到见名知意,不要乱取名字. 多个单词使用驼峰标识或下划名命令</p></li></ol><p>代码演示：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 错误命名: var 3num = 13; //首字符是数字会报SyntaxError 语法错误</span>
<span class="token comment">// 正确命名:</span>
<span class="token keyword">var</span> Num2 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> _num3 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> $num4 <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">;</span>

<span class="token comment">// 错误命名:var var = 1; //var是关键字,会报语法错误. function, array, number, let, name, class都不行</span>

<span class="token comment">//小驼峰命名 从第二个开始每一个单词首字母大写</span>
<span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token comment">//大驼峰命名 从第一个单词开始每一个单词的首字母都大写</span>
<span class="token keyword">var</span> UserName <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>练习题：</p><ul><li>练习一：定义一些变量，保存自己的个人信息：比如姓名、年龄、身高、体重、爱好等等</li><li>练习二：定义一个变量name，赋值成wangcai。定义一个变量admin，将name赋值给admin</li><li>练习三：定义变量，保存两个数字，并且对两个变量的数字进行交换</li></ul><p>参考答案：</p><p><img src="`+v+`" alt="1693465632988"></p><p>:::使用var关键字声明的变量<strong>会被提升</strong>(提升到了代码段的<strong>最前面</strong>,赋值<strong>不会一起被提升</strong>)</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//猜猜如下三行代码的控制台输出结果</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token comment">// 上面的代码var num被提升了,如下(只提升声明 不提升赋值)</span>
<span class="token keyword">var</span> num<span class="token punctuation">;</span>  <span class="token comment">//声明</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//undefined 只声明 未赋值</span>
num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">//赋值了</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10 </span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// 使用一个var声明多个变量</span>
<span class="token keyword">var</span> num<span class="token punctuation">,</span> age<span class="token punctuation">,</span> sex<span class="token punctuation">,</span> username<span class="token punctuation">;</span> <span class="token comment">//username仅声明,未赋值</span>
num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span>
<span class="token comment">// 上面等同于下面</span>
<span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> sex <span class="token operator">=</span> <span class="token string">&#39;男&#39;</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
<span class="token comment">// 不使用var关键字声明,直接赋值</span>
<span class="token comment">// 可以这样写但是不建议,不使用var声明的关键字,这个变量是被挂载在window对象</span>
userName <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// num3 is not defined  报错 因为既没有被声明也没有被赋值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>:::</p><h3 id="_3-变量与内存指向关系" tabindex="-1"><a class="header-anchor" href="#_3-变量与内存指向关系" aria-hidden="true">#</a> 3，变量与内存指向关系</h3><p>情况1：</p><p><img src="`+b+'" alt="1693466066922"></p><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。然后又再内存中创建了一块域保存字符串”wangcai&quot;，name变量名则指向”wangcai“所对应的空间，不再指向&quot;malu&quot;所对应的空间。&quot;malu&quot;所对应的内存空间，无人指向的数据会被标记为垃圾，由解释器自动化回收。</p><p>情况2：</p><p><img src="'+g+'" alt="1693466289634"></p><p>在计算机的内存中创建一块区域保存字符串”malu&quot;，name变量名则指向这块区域。new_name变量名指向name变量，因为被指向的是变量名，所以自动会转指向到name变量代表的内存区域。</p><p>情况3：情况1+情况2</p><p><img src="'+h+'" alt="1693466469432"></p><p>情况4：同样的字符串但是存放在不同的内存区域</p><p><img src="'+f+'" alt="1693466561954"></p><p>课堂练习题：</p><ol><li>看代码写结果</li></ol><p><img src="'+q+'" alt="1693466714470"></p><ol start="2"><li>按要求写代码</li></ol><p><img src="'+y+'" alt="1693466950112"></p><ol start="3"><li>看代码写结果</li></ol><p><img src="'+_+'" alt="1693467083481"></p><ol start="4"><li>看代码写结果</li></ol><p><img src="'+w+`" alt="1693467208860"></p><h3 id="综合变量输入练习" tabindex="-1"><a class="header-anchor" href="#综合变量输入练习" aria-hidden="true">#</a> 综合变量输入练习</h3><ol><li>定义一些变量 表示你个人的基本信息</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token string">&quot;张三&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> userAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> hobby <span class="token operator">=</span> <span class="token string">&quot;写代码&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>声明一个变量 将它的值赋给另一个变量</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> newNum <span class="token operator">=</span> num<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>交换两个变量 这两个变量都是数字</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token comment">// 借助一个变量</span>
<span class="token keyword">var</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//c == 1</span>
a <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">//a == 2</span>
b <span class="token operator">=</span> c<span class="token punctuation">;</span> <span class="token comment">//b == 1</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>提示输入姓名，然后给姓名后面拼接一个&quot;666&quot;,最终打印结果。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入姓名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 打印变量不需要加引号</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token number">666</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>提示输入 姓名/位置/行为，然后做拼接并打印：xx 在 xx 做 xx 。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> userName <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入姓名&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> userPs <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入位置&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> userAct <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入行为&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>userName <span class="token operator">+</span> <span class="token string">&quot;在&quot;</span> <span class="token operator">+</span> userPs <span class="token operator">+</span> <span class="token string">&quot;做&quot;</span> <span class="token operator">+</span> userAct<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>提示输入两个数字，计算两个数的和。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请输入数字&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> num2 <span class="token operator">=</span> <span class="token operator">+</span><span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;请再输入一个数字&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num <span class="token operator">+</span> num2<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="四-数据类型" tabindex="-1"><a class="header-anchor" href="#四-数据类型" aria-hidden="true">#</a> 四，数据类型</h2><h3 id="_1-数据类型介绍" tabindex="-1"><a class="header-anchor" href="#_1-数据类型介绍" aria-hidden="true">#</a> 1，数据类型介绍</h3><p>软件运行流程：打开某个程序时，先从硬盘中把程序的代码加载到内存中. 然后CPU执行内存中的代码</p><p><img src="`+j+'" alt="1693450105316"></p><p><strong>为什么需要数据类型？</strong></p><p>软件上面的很多的数据都是放在内存的。内存空间是有限，绝大部分的编程语言为了合理地使用内存空间，都会把使用到的数据进行分类，分成不同的类型，目的就是为了<strong>更加合理的使用内存空间</strong>。</p><p>在 JavaScript 中有 8 种数据类型:</p><ul><li>number 用于任何类型的数字：整数或浮点数。</li><li>string 用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li>boolean 用于 true 和 false。</li><li>undefined 用于未定义的值 —— 只有一个 undefined 值的独立类型。表示空</li><li>null 表示空，表示对象的空。</li><li>object 用于更复杂的数据结构。后面讲面向对象时会细讲。</li><li>bigInt 后面说</li><li>symbol 后面说</li></ul><p><img src="'+x+'" alt="1693530256530"></p><p><code>typeof</code> 可用来<strong>检测变量的数据类型</strong></p><p><img src="'+S+'" alt="1693530705150"></p><h3 id="_1-数字类型number" tabindex="-1"><a class="header-anchor" href="#_1-数字类型number" aria-hidden="true">#</a> 1，数字类型Number</h3><p>是Number，包含整数和小数，例如：年龄、存款、尺寸、手机号等。数据类型是支持 加/减/乘/除/取余/指数 等操作。直接上代码：</p><p><img src="'+T+'" alt="1693450613117"></p><h3 id="_2-字符串string" tabindex="-1"><a class="header-anchor" href="#_2-字符串string" aria-hidden="true">#</a> 2，字符串String</h3><p>字符串，其实就是我们生活中的文本信息。例如：姓名、地址、自我介绍等。 字符串有一个特点，他必须由引号引起来，直接上代码：</p><p><img src="'+N+'" alt="1693450963034"></p><h3 id="_3-布尔类型boolean" tabindex="-1"><a class="header-anchor" href="#_3-布尔类型boolean" aria-hidden="true">#</a> 3，布尔类型Boolean</h3><p>布尔类型就两个值：true和false。 布尔类型对应的值只有两个，一个是ture，一个是false， 直接上代码：</p><p><img src="'+J+'" alt="1693451235038"></p><h3 id="数据类型转化" tabindex="-1"><a class="header-anchor" href="#数据类型转化" aria-hidden="true">#</a> 数据类型转化</h3><p>把字符串和布尔类型转化成数字类型，用<code>Number()</code>。如下：</p><p><img src="'+M+'" alt="1693451559535"></p><p>转化成字符串，用<code>String()</code>。如下：</p><p><img src="'+C+'" alt="1693451688038"></p><p>转化成布尔类型，用<code>Boolean()</code>。如下：</p><p><img src="'+B+`" alt="1693451804500"></p><p><strong>练习题：</strong></p><ul><li>计算数字50乘以10再除以5的商并输出</li><li>判断数字8是否大于10的结果并输出</li><li>计算数字30除以2得到的余数并输出</li><li>判断 字符串”admin”和”root”是否相等的结果并输出</li><li>判断 字符串666和数字666是否相等的结果并输出</li><li>看代码写结果（禁止运行代码）</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;88&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">111</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参考答案：</p><ul><li><p>计算数字50乘以10再除以5的商并输出 console.log(50*10/5)</p></li><li><p>判断数字8是否大于10的结果并输出 console.log(8&gt;10)</p></li><li><p>计算数字30除以2得到的余数并输出</p><p>console.log(30%2)</p></li><li><p>判断 字符串”admin”和”root”是否相等的结果并输出 console.log(&#39;admin&#39; == &#39;root&#39;)</p></li><li><p>判断 字符串666和数字666是否相等的结果并输出 console.log(666 == &#39;666&#39;)</p></li><li><p>看代码写结果（禁止运行代码）</p></li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;100&quot;</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 300 </span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;88&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 211</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// &#39;111222&#39;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// &#39;333&#39;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&quot;8&quot;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">111</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;你好&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-number数据类型" tabindex="-1"><a class="header-anchor" href="#_2-number数据类型" aria-hidden="true">#</a> 2，Number数据类型</h3><p>number可以表示整数，也可以表示小数，如下：</p><p>数字number可以有很多操作，比如，乘法 、除法 /、加法 +、减法 - 等，如下：</p><p>number也有不同进制的表示法：</p><p>数据的表示范围：</p><p>isNaN，用于判断是否是一个NaN，是NaN结果是true，否则结果是false，如下：</p><h3 id="_3-string数据类型" tabindex="-1"><a class="header-anchor" href="#_3-string数据类型" aria-hidden="true">#</a> 3，String数据类型</h3><p>一个项目中，字符串类型用的是最多的，如 人的姓名：“wangcai”。地址：“北京市”。简介：“一名前端程序员”；</p><p>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式:</p><ul><li>双引号 “malu”</li><li>单引号 ’malu‘</li><li>反引号 \`\`</li></ul><p>代码演示：</p><p>转义字符，转义就是转变原有的意思，如下：</p><p>通过索引访问访问某个字符串中的某个字符，如下：</p><p>可以求字符串的长度，如下：</p><p>字符串拼接，如下：</p><h3 id="_4-boolean数据类型" tabindex="-1"><a class="header-anchor" href="#_4-boolean数据类型" aria-hidden="true">#</a> 4，Boolean数据类型</h3><p>Boolean类型就是表示真假，如是否毕业. 是否有身份证. 是否购买车票. 是否成年人；取值就两个：一个是true，一个是false。如下：</p><h3 id="_5-undefined数据类型" tabindex="-1"><a class="header-anchor" href="#_5-undefined数据类型" aria-hidden="true">#</a> 5，Undefined数据类型</h3><p>undefined 类型只有一个值，就是特殊值 undefined:</p><ul><li>如果我们声明一个变量，但是没有对其进行初始化时，它默认就是undefined；</li></ul><h3 id="_6-object数据类型" tabindex="-1"><a class="header-anchor" href="#_6-object数据类型" aria-hidden="true">#</a> 6，Object数据类型</h3><p>object数据类型是复杂类型，前面讲的都是基本数据类型，往往可以表示一组数据，是其他数据的一个集合。代码演示：</p><h3 id="_7-null数据类型" tabindex="-1"><a class="header-anchor" href="#_7-null数据类型" aria-hidden="true">#</a> 7，Null数据类型</h3><p>null也是一种数据类型，它对应的值只有一个，也是null。也是表示空。只不过它通常表示一个对象为空，所以在给一个对象进行初始化时，赋值为null，如下：</p><h3 id="_8-数据类型转化" tabindex="-1"><a class="header-anchor" href="#_8-数据类型转化" aria-hidden="true">#</a> 8，数据类型转化</h3><p>把一种数据类型转化成另一种数据类型，分两类：</p><ul><li>强制数据类型转化，需要写代码进行转化</li><li>隐式数据类型转化，不需要写代码进行转化，它会悄悄自动的转化</li></ul><p>为什么要学习数据类型转换?</p><p>主要进行数据比较和处理用户输入数据.</p><h3 id="_9-其它类型转string" tabindex="-1"><a class="header-anchor" href="#_9-其它类型转string" aria-hidden="true">#</a> 9，其它类型转String</h3><p>其它类型转string</p><ul><li>把number转成string</li><li>把boolean转成string</li><li>把und转成string</li></ul><p>方式一：<code>.toString()</code>，代码如下：</p><p>方式二：String构造函数，代码如下：</p><p>方式三：+把其它类型转成字符串，代码如下：</p><p>总结：</p><ul><li>强制类型转化：toString 或 String构造器</li><li>隐式类型转化：+</li></ul><h3 id="_10-其它类型转number" tabindex="-1"><a class="header-anchor" href="#_10-其它类型转number" aria-hidden="true">#</a> 10，其它类型转Number</h3><h4 id="a-把字符串转化成number" tabindex="-1"><a class="header-anchor" href="#a-把字符串转化成number" aria-hidden="true">#</a> A）把字符串转化成number</h4><p>把字符串转成number</p><ul><li>如果字符串中都是数值，就可以正常转化，如：&quot;123&quot; =&gt; 123</li><li>如果是一个空串，空串是&quot;&quot;，转化后， &quot;&quot; =&gt; 0</li><li>如果字符串中不只有数字，转化后是NaN 如：&quot;hello123&quot; =&gt; NaN</li></ul><p>利用Number构造器转化，代码如下：</p><p>利用+或-进行转化，如下：</p><p>利用parseInt和parseFloat进行转化，如下：</p><h4 id="b-把布尔转化成number" tabindex="-1"><a class="header-anchor" href="#b-把布尔转化成number" aria-hidden="true">#</a> B）把布尔转化成number</h4><p>转化方式：</p><ul><li>Number构造器</li><li>+-</li><li>如果是true，转化成数字1</li><li>如果是false，转化成数字0</li></ul><p>直接上代码：</p><h4 id="c-把und转化成number" tabindex="-1"><a class="header-anchor" href="#c-把und转化成number" aria-hidden="true">#</a> C）把und转化成number</h4><p>直接上代码：</p><h4 id="d-把null转化成number" tabindex="-1"><a class="header-anchor" href="#d-把null转化成number" aria-hidden="true">#</a> D）把null转化成number</h4><p>直接上代码：</p><h3 id="_11-其它类型转boolean" tabindex="-1"><a class="header-anchor" href="#_11-其它类型转boolean" aria-hidden="true">#</a> 11，其它类型转Boolean</h3><h4 id="a-把string类型转成boolean" tabindex="-1"><a class="header-anchor" href="#a-把string类型转成boolean" aria-hidden="true">#</a> A）把string类型转成boolean</h4><p>直接上代码：</p><h4 id="b-把number类型转成boolean" tabindex="-1"><a class="header-anchor" href="#b-把number类型转成boolean" aria-hidden="true">#</a> B）把number类型转成boolean</h4><p>直接上代码：</p><h4 id="c-把und类型转成boolean" tabindex="-1"><a class="header-anchor" href="#c-把und类型转成boolean" aria-hidden="true">#</a> C）把und类型转成boolean</h4><p>直接上代码：</p><h4 id="d-把null类型转成boolean" tabindex="-1"><a class="header-anchor" href="#d-把null类型转成boolean" aria-hidden="true">#</a> D）把null类型转成boolean</h4><p>直接上代码：</p><p>总结：如些数据转成布尔类型会变成false?</p><p>答：空串，0，-0，NaN，und，null 会转化成false，其它的都会转化成true 这个结论非常重要</p><h2 id="五-运算符" tabindex="-1"><a class="header-anchor" href="#五-运算符" aria-hidden="true">#</a> 五，运算符</h2><h3 id="_1-什么是运算符" tabindex="-1"><a class="header-anchor" href="#_1-什么是运算符" aria-hidden="true">#</a> 1，什么是运算符</h3><p>提到运算符，我想大家首先想到的就是加、减、乘、除之类，除此之外，还有一些其它的运算符，从功能角度来分，分：</p><ul><li>算术运算符</li><li>递增和递减运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>赋值运算符</li></ul><p>从操作数的个数来分：</p><ul><li>一元运算符，也叫单目运算符</li><li>二元运算符，也叫双目运算符</li><li>三元运算符，也叫三目运算符</li></ul><h3 id="_2-算术运算符" tabindex="-1"><a class="header-anchor" href="#_2-算术运算符" aria-hidden="true">#</a> 2，算术运算符</h3><p>概念：数学运算符也叫算术运算符，主要包括加、减、乘、除、取余（求模）。</p><p><img src="`+D+`" alt="1693894960851"></p><p>什么是运算符表达式：</p><ul><li>是由数字、运算符、变量等组成的式子。表达式都是有值的。 表达式最终都会有一个结果。</li></ul><p>加减代码：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+P+`" alt="1693896849951"></p><p>乘除代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+O+'" alt="1693896980935"></p><h3 id="_3-赋值运算符" tabindex="-1"><a class="header-anchor" href="#_3-赋值运算符" aria-hidden="true">#</a> 3，赋值运算符</h3><p>概念：将=右边的数据，存储到=左边的变量名对应的内存空间中。</p><p><img src="'+E+'" alt="1693895568370"></p><p>特点：</p><ul><li>赋值运算符有右结合性</li><li>赋值运算符的优先级别低于算术运算符的优先级别</li><li>赋值运算符的左边 不能放常量 只能放变量</li><li>分简单的赋值运算符 和 复杂的赋值运算符</li><li>复杂赋值运算符：+= -= *= /= %=</li></ul><p>代码：</p><p>赋值运算符有副作用，它的整体也有一个值，如下：</p><h3 id="_4-自增自减运算符" tabindex="-1"><a class="header-anchor" href="#_4-自增自减运算符" aria-hidden="true">#</a> 4，自增自减运算符</h3><p>概念：</p><ul><li>如果需要反复给数字变量添加或减去1，可以使用递增（++）和递减（ -- ）运算符来完成。</li><li>递增和递减运算符必须和变量配合使用。</li><li>在 JavaScript 中，递增（++）和递减（ -- ）既可以放在变量前面，也可以放在变量后面。</li><li>以++为例，如果++在前，整体的值是一个新值，++在后，整体的值是一个旧值。</li></ul><p>代码：</p><p><img src="'+A+'" alt="1693896093620"></p><p>看如下代码写结果：</p><p><img src="'+$+'" alt="1693896379729"></p><p>易错题:</p><p><img src="'+H+'" alt="image-20240313143112193"></p><h3 id="_5-关系运算符" tabindex="-1"><a class="header-anchor" href="#_5-关系运算符" aria-hidden="true">#</a> 5，关系运算符</h3><p>概念：比较运算符（关系运算符）是两个数据进行比较时所使用的运算符，比较运算后，会返回一个布尔值（true / false）作为比较运算的结果。</p><p>代码：</p><p>=== 和 == 的区别：</p><ul><li>普通的相等性检查 ==，不能区分出 0 和 false，或者空字符串和 false这类运算</li><li>严格相等运算符 === 在进行比较时不会做任何的类型转换</li></ul><h3 id="_6-逻辑运算符" tabindex="-1"><a class="header-anchor" href="#_6-逻辑运算符" aria-hidden="true">#</a> 6，逻辑运算符</h3><p>概念：将多个表达式或者值放到一起来获取到一个最终的结果</p><p><img src="'+U+'" alt="1693898871959"></p><p>逻辑与<code>&amp;&amp;</code>:一假全假</p><p><img src="'+X+'" alt="1693899045224"></p><p>逻辑或<code>||</code>:一真全真</p><p><img src="'+I+'" alt="1693899168460"></p><p>逻辑非<code>!</code>:取反</p><p><img src="'+G+`" alt="1693899228622"></p><p>其它逻辑运算符还是比较难的，看如下代码：</p><p>看再如下的题目：</p><h3 id="_7-三目运算符" tabindex="-1"><a class="header-anchor" href="#_7-三目运算符" aria-hidden="true">#</a> 7，三目运算符</h3><p>概念：</p><ul><li>?: 整体叫三目运算符</li><li>表达式? 结果A: 结果B</li><li>如果表达式的结果为true 那么整体的结果就是: 前面的，如果表达式的结果为false 那么整体的结果就是: 后面的</li></ul><p>直接上代码：</p><h3 id="_8-运算符的优先级" tabindex="-1"><a class="header-anchor" href="#_8-运算符的优先级" aria-hidden="true">#</a> 8，运算符的优先级</h3><p>运算符的优先级有很多，常见的没几个，推荐你记住3个即可：</p><ul><li>算数优先级优先级 大于 比较运算符</li><li>比较运算符优先级 大于 逻辑运算符</li><li>逻辑运算符内部三个优先级 ! &gt; &amp;&amp; &gt; ||</li></ul><p>直接上代码：</p><p>其它优先级参考：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</p><h3 id="_9-小练习与作业" tabindex="-1"><a class="header-anchor" href="#_9-小练习与作业" aria-hidden="true">#</a> 9，小练习与作业</h3><p>练习：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;root&quot;</span>
<span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;root&quot;</span>
<span class="token keyword">let</span> v3 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">8</span>
<span class="token keyword">let</span> v4 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">8</span>
<span class="token keyword">let</span> v5 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">2</span>
<span class="token keyword">let</span> v6 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token number">3</span>
<span class="token keyword">let</span> v7 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">-</span><span class="token number">1</span>
<span class="token keyword">let</span> v8 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">100</span>
<span class="token keyword">let</span> v9 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">||</span> <span class="token number">10</span>
<span class="token keyword">let</span> v10 <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">let</span> v11 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">let</span> v12 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token number">8</span>
<span class="token keyword">let</span> v13 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span>
<span class="token keyword">let</span> v14 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">88</span>
<span class="token keyword">let</span> v15 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token number">7</span>
<span class="token keyword">let</span> v16 <span class="token operator">=</span> <span class="token string">&quot;admin&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;&quot;</span>
<span class="token keyword">let</span> v17 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span>
<span class="token keyword">let</span> v18 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;中国&quot;</span>
<span class="token keyword">let</span> v19 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">||</span> <span class="token number">7</span> <span class="token operator">||</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token number">6</span>
<span class="token keyword">let</span> v20 <span class="token operator">=</span> <span class="token number">8</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token number">7</span>
<span class="token keyword">let</span> v21 <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">3</span>
<span class="token keyword">let</span> v22 <span class="token operator">=</span> <span class="token operator">!</span><span class="token number">8</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">2</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>作业：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 计算下面表达式的结果</span>

<span class="token number">1</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">8</span> <span class="token operator">||</span> <span class="token number">7</span> <span class="token operator">&lt;</span> <span class="token number">6</span>

    <span class="token operator">!</span><span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">4</span> <span class="token operator">&gt;</span> <span class="token number">5</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">9</span> <span class="token operator">&gt;</span> <span class="token number">8</span> <span class="token operator">||</span> <span class="token number">7</span> <span class="token operator">&lt;</span> <span class="token number">6</span>

<span class="token number">8</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">9</span> <span class="token operator">&amp;&amp;</span> <span class="token number">7</span>

<span class="token number">0</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token number">3</span>

<span class="token number">6</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span>

<span class="token number">3</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span>

<span class="token number">0</span> <span class="token operator">||</span> <span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">4</span>

<span class="token number">5</span> <span class="token operator">&lt;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">3</span>

<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">||</span> <span class="token number">6</span>

<span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span>

<span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">1</span>

<span class="token number">2</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span>

<span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">0</span>

<span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token number">2</span> <span class="token operator">||</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> <span class="token number">4</span> <span class="token operator">||</span> <span class="token number">3</span> <span class="token operator">&gt;</span> <span class="token number">2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="六-条件语句" tabindex="-1"><a class="header-anchor" href="#六-条件语句" aria-hidden="true">#</a> 六，条件语句</h2><p>在日常生活中，也有三大流程，有：顺序流程，选择流程，循环流程。日常生活中是任何事件，都可以使用上面的三大流程解释。在计算机中，对应了三大结构，顺序结构，分支结构，循环结构。</p><p>要实现所谓选择结构，有三种实现方案：</p><ul><li>if / if else / if elseif else</li><li>三元运算符</li><li>switch语句</li></ul><p>先看最简单的if语句，满足条件就执行某些代码，不满足就不执行，如下：</p><p>单个if语句的语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 括号内的条件为true时，进入大括号里执行代码</span>
<span class="token comment">// 小括号内的结果若不是布尔类型时，会发生隐式转换转为布尔类型</span>
<span class="token comment">// 数字 0、空字符串 “”、null、undefined 和 NaN 都会被转换成 false</span>
<span class="token comment">// 其他值被转换为 true</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    满足条件要执行的代码
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有所谓的if else语句，如下：</p><p>if..else语句的语法，如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    满足条件要执行的代码
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    不满足条件要执行的代码
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    条件成立之后的代码<span class="token operator">...</span>
        条件成立之后的代码<span class="token operator">...</span>
        条件成立之后的代码<span class="token operator">...</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    条件不成立之后执行的代码<span class="token operator">...</span>
        条件不成立之后执行的代码<span class="token operator">...</span>
        条件不成立之后执行的代码<span class="token operator">...</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>做一个小案例，感受一下：请输入用户名，如果用户名是malu，控制台提示欢迎malu，否提示你输入的用户名不正确，如下：</p><h3 id="_1-基本条件语句" tabindex="-1"><a class="header-anchor" href="#_1-基本条件语句" aria-hidden="true">#</a> 1，基本条件语句</h3><p>对于if语句 或 ifelse语句，常见的使用方式，总结一下。</p><p>情况1：</p><p>情况2：</p><p>情况3：</p><p>情况4：</p><p>情况5：</p><p>情况6：</p><p>练习题：</p><ul><li>提示用户输入用户名和密码，用户名等于&quot;admin&quot;且密码等于&quot;123&quot;就输出登录成功；否则输出登录失败。</li><li>猜数字，提示用户输入一个数字，判断数字如果大于10，就输出猜错了；否则输出猜对了。</li><li>提示用户输入一个数字，判断是否为偶数，是偶数则输出 偶数，否则输出 奇数。</li></ul><h3 id="_2-多条件语句" tabindex="-1"><a class="header-anchor" href="#_2-多条件语句" aria-hidden="true">#</a> 2，多条件语句</h3><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    代码<span class="token number">1</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    代码<span class="token number">2</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>条件<span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    代码<span class="token number">3</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    代码n
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>写一个练习题：输入一个数字，如果等于6，打印出刚刚好，大于6，打印出太大，小于6，打印出太小了，代码如下：</p><p>再做一个练习，输入分数，&gt;90，输出优，&gt;80，输出良，&gt;70，输出中，&gt;60，输出差，&lt;60，输出不及格，代码：</p><h3 id="_3-条件嵌套" tabindex="-1"><a class="header-anchor" href="#_3-条件嵌套" aria-hidden="true">#</a> 3，条件嵌套</h3><p>模拟10086客服，输入1，输出话费相关，输入2，业务办理，输入3，人工服务。输入其它提示输入错误。</p><p>如果第1次选择了1，就是话费相关的，再输入1，提示查询话费，输入2，提示交话费，输入其它就提示输入错误。 代码如下：</p><p>注意点：</p><ul><li>if语句中的条件，不管是什么表达式，都会转化成布尔类型</li><li>if语句后面的{}可以不写，如果不写，只有if后面第1条语句，相当于是{}中的</li></ul><h3 id="_4-练习题" tabindex="-1"><a class="header-anchor" href="#_4-练习题" aria-hidden="true">#</a> 4，练习题</h3><p>练习题：</p><ul><li><p>接收用户输入的数据，判断这个数据是偶数还是奇数，如果是偶数，输出yes，如果是奇数，输出no</p></li><li><p>接收用户输入的1~7数据，判断是星期几后，打印出来</p></li><li><p>接收用户输入的1~12的数据，判断是什么季节后输出</p></li><li><p>有三个变量：a, b, c 将变量升序排序后输出</p></li><li><p>判断一个年份是否是闰年（闰年：能被4整除，不能整除100为闰年 或者 能被400整除 就是闰年。）</p></li><li><p>输入一个0到50的数，如果数小于10，需要在它前面补0。</p></li></ul><h2 id="七-while循环语句" tabindex="-1"><a class="header-anchor" href="#七-while循环语句" aria-hidden="true">#</a> 七，while循环语句</h2><h3 id="_1-基本循环语句" tabindex="-1"><a class="header-anchor" href="#_1-基本循环语句" aria-hidden="true">#</a> 1，基本循环语句</h3><p>先看一张图：</p><p>语法格式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 1.先判定条件 </span>
<span class="token comment">// 2.条件成立 =&gt;执行代码=&gt;循环判定条件 执行代码</span>
<span class="token comment">// 3.条件不成立 不在执行代码  跳出循环</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span>循环条件<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    重复要执行的代码（ 循环体）
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示如下代码：</p><p>练习一下：</p><ul><li><p>练习一：打印10次Hello World</p></li><li><p>练习二：打印0~99的数字</p></li><li><p>练习三：计算0~99的数字和</p></li><li><p>练习四：计算0~99所有奇数的和</p></li><li><p>练习五：计算0~99所有偶数的和</p></li><li><p>练习六：操场上跑圈，一圈500米，跑5圈，计算跑了多少米</p></li><li><p>练习七：打印出1~100之间 7的倍数，并统计个数</p></li><li><p>练习八：用户输入一个正整数n，计算1+2+3+4+...+n的和</p></li><li><p>练习九：把一个四位数拆成一位一位，1234, 千位数是1, 百位数是2, 十位数是3, 个位数是4</p></li><li><p>练习十：给定一个随机数，换算成多少天多少小时多少分钟多少秒。如：345678909876545678秒</p></li><li><p>练习十一：通过while循环计算10的阶乘</p></li><li><p>练习十二：求100~999内的的有水仙花数（一个数字的每一位的三次方之和，如果和这个数字一样，就是水仙花数 如：153 ）</p></li><li><p>练习十三：求1-100之间所有数和的平均值</p></li><li><p>练习十四：求1~100 之间， 除了能被7整除之外的整数和</p></li><li><p>练习十五：求1-100之间个位数不为3的数的累加和</p></li><li><p>练习十六：求从1开始第35个能被7和3整除的整数</p></li><li><p>练习十七：请实现一个用户登录系统，如果密码错误则反复提示让用户重新输入，直到输入正确才停止。</p></li><li><p>练习十八：猜数字，设定一个理想数字比如：66，一直提示让用户输入数字，如果比66大，则显示猜测的结果大了；如果比66小，则显示猜测的结果小了; 只有输入等于66，显示猜测结果正确，然后退出循环。</p></li><li><p>练习十九：求 1~100 的所有整数这样的结果： 1 - 2 + 3 - 4 + 5 - 6 = ?</p></li><li><p>练习二十：输出 10 ~ 1 所有整数。</p></li></ul><h3 id="_2-break-和-continue" tabindex="-1"><a class="header-anchor" href="#_2-break-和-continue" aria-hidden="true">#</a> 2，break 和 continue</h3><p>break是结束所有循环的，continue是结束本次循环，继续下次循环。上午写了一个案例：操场上跑圈，一圈500米，跑5圈，计算跑了多少米。把次案例修改一下：</p><p>操场上跑圈，一圈500米，跑到第4圈的时候，不舒服，不跑了，回宿舍了，问一次跑了多米。如下：</p><p>操场上跑圈，一圈500米，跑到第4圈的时候，不舒服，休息了一下，第四圈没有跑，但是跑了第5圈，，问一次跑了多米。如下：</p><p>总结语法：</p><h2 id="八-do-while循环语句" tabindex="-1"><a class="header-anchor" href="#八-do-while循环语句" aria-hidden="true">#</a> 八，do..while循环语句</h2><h3 id="_1-do-while循环语句介绍" tabindex="-1"><a class="header-anchor" href="#_1-do-while循环语句介绍" aria-hidden="true">#</a> 1，do..while循环语句介绍</h3><p>do..while一上来就会执行一次循环体，不管你条件是否满足，再去判断条件，如果条件成立，继续执行循环体，如果不成立，就不会执行循环体。基本上不用，了解。</p><p>先看图：</p><p>语法：</p><p>特点：</p><ol><li>绝大部分情况下 dowhile 和while是可以进行互转的</li><li>dowhile循环的循环体至少执行一次，while的循环体可能一次都不执行</li><li>在真实开发中，基本上不用dowhile 很少用while 更多的用的是for循环</li></ol><h2 id="九-for循环" tabindex="-1"><a class="header-anchor" href="#九-for循环" aria-hidden="true">#</a> 九，for循环</h2><h3 id="_1-for循环的介绍" tabindex="-1"><a class="header-anchor" href="#_1-for循环的介绍" aria-hidden="true">#</a> 1，for循环的介绍</h3><p>在讲for循环之前，先补充一个运算符，叫++或--，直接上代码：</p><p>什么也整体的值，如下：</p><p>开始说for循环，先看一下它的语法：</p><p>再做一下，上午的练习题：</p><ul><li><p>练习一：打印10次Hello World</p></li><li><p>练习二：打印0~99的数字</p></li><li><p>练习三：计算0~99的数字和</p></li><li><p>练习四：计算0~99所有奇数的和</p></li><li><p>练习五：计算0~99所有偶数的和</p></li></ul><h3 id="_2-for循环嵌套" tabindex="-1"><a class="header-anchor" href="#_2-for循环嵌套" aria-hidden="true">#</a> 2，for循环嵌套</h3><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span>外部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span>内部声明记录循环次数的变量<span class="token punctuation">;</span> 循环条件<span class="token punctuation">;</span> 变化值<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        循环体
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>演示代码：</p><h3 id="_3-for循环练习题" tabindex="-1"><a class="header-anchor" href="#_3-for循环练习题" aria-hidden="true">#</a> 3，for循环练习题</h3><ol><li><p>操场上跑圈，一圈500米，跑5圈，计算跑了多少米</p></li><li><p>打印九九乘法表</p></li><li><p>打印如下的图形（document.write(&quot; * &quot;)）</p></li><li><p>打印如下的图形</p></li><li><p>判断一个数字是不是质数(素数)</p></li><li><p>百钱买鸡（鸡翁一，值钱五；鸡母一，值钱三；鸡雏三，值钱一；百钱买百鸡，则翁、母、雏各几何？）</p></li><li><p>斐波那契数列，输入斐波那契数列的个数，打印斐波那契数列，如输入了10，求斐波那契数列前10个数字，则输出：0,1,1,2,3,5,8,13,21,34,55,89....</p></li><li><p>输入一批整数，使用循环求出最大值和最小值，输入0的时就结</p></li><li><p>给20块钱买可乐，每瓶可乐3块钱，喝完之后退瓶子可以换回1块钱，问最多可以喝到多少瓶可乐。</p></li></ol><h3 id="_4-作业" tabindex="-1"><a class="header-anchor" href="#_4-作业" aria-hidden="true">#</a> 4，作业</h3><ul><li><p>练习1：打印如下的图形</p></li><li><p>练习2：打印如下的图形</p></li><li><p>练习3：打印如下的图形</p></li><li><p>练习4：东方航空从北京飞往马尔代夫的机票原价为4000元，4到10月份为旺季，其他月份为淡季，旺季时候头等舱打9折，经济舱打7.5折；淡季头等舱打6折，经济舱打3折。输入出行的月份和选择的舱型计算出机票价格。</p></li><li><p>练习5：购物，判断是否为会员(如果是输入y，否则输入n)，然后再计算金额，普通顾客购物满100元 9折，会员购物低于200打8折，会员购物满200元 7.5折。</p></li><li><p>练习6：迷你计算器 : 输入两个数以及运算符号得出相应的运算结果</p></li><li><p>练习7：输入三个整数，并根据对三个数的比较显示如下信息：</p><ul><li>如果三个数都不相等则显示0；</li><li>如果三个数中有二个数相等则显示1；</li><li>如果三个数都相等，则显示2</li></ul></li><li><p>练习8： 用户先输入自己的性别，比如男、女。然后输入自己的年龄。判断能否结婚。男的22以上，女的20以上。</p></li><li><p>练习9：实现用户登录系统，并且要支持连续三次输错之后直接退出，并且在每次输错误时显示剩余错误次数</p></li><li><p>练习10：猜年龄游戏 要求：允许用户最多尝试3次，3次都没猜对的话，就直接退出，如果猜对了，打印恭喜信息并退出。</p></li><li><p>练习11：猜年龄游戏升级版 要求：允许用户最多尝试3次，每尝试3次后，如果还没猜对，就问用户是否还想继续玩，如果回答Y，就继续让其猜3次，以此往复，如果回答N，就退出程序，如何猜对了，就直接退出。</p></li></ul><h2 id="十-switch语句" tabindex="-1"><a class="header-anchor" href="#十-switch语句" aria-hidden="true">#</a> 十，switch语句</h2><p>语法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 找到跟小括号里数据全等的case值，并执行里面对应的代码</span>

<span class="token keyword">switch</span> <span class="token punctuation">(</span>表达式<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> 值<span class="token number">1</span><span class="token operator">:</span>
        代码<span class="token number">1</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">case</span> 值<span class="token number">2</span><span class="token operator">:</span>
        代码<span class="token number">2</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">default</span><span class="token operator">:</span>
        代码n
        <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输入1，打印星期1，输入2，打印星期2... 代码如下：</p><p>switch后面可以跟变量，也可以跟字面量，只要是表达式就OK，如下：</p><p>break不能省略，有break，从满足条件的break开始，后面的所有的case都要执行，如下：</p><p>使用switch语句，可以代替if..else if...else if...else语句。</p><h2 id="十二-数组" tabindex="-1"><a class="header-anchor" href="#十二-数组" aria-hidden="true">#</a> 十二，数组</h2><h3 id="_1-数组介绍" tabindex="-1"><a class="header-anchor" href="#_1-数组介绍" aria-hidden="true">#</a> 1，数组介绍</h3><p>前面讲了多个数据类型，有字符串，数字，布尔，und，null。这些数据类型叫基本数据类型，还有复杂数据类型，复杂数据类型有数组，有函数，有对象。数据是一个容器，是一个有序的集合，它里面可以放一堆的数据。</p><p>数组叫array，数组中的每一个数据，叫元素，每一个元素都有一个索引，也叫下标（index），索引是从0开始的。数组中元素的个数，叫数组的长度。数组中放的数据的类型可以是不一样，可以放任意的数据类型。代码如下：</p><h3 id="_2-操作数组" tabindex="-1"><a class="header-anchor" href="#_2-操作数组" aria-hidden="true">#</a> 2，操作数组</h3><p>在编程中，说到操作，就是增删改查，先讲一个遍历，所谓的遍历就是把数组中的每一个元素都取出来。</p><h4 id="a-数组的遍历" tabindex="-1"><a class="header-anchor" href="#a-数组的遍历" aria-hidden="true">#</a> a）数组的遍历</h4><p>利用普通的for循环进行遍历，如下：</p><p>使用for..in.. 进行遍历，如下：</p><p>也可以使用for..of.. 进行遍历，如下：</p><p>案例：数组遍历之求最大值和最小值</p><p>案例：给一个数组，求平均数</p><h4 id="b-数组和字符串之间相互转化" tabindex="-1"><a class="header-anchor" href="#b-数组和字符串之间相互转化" aria-hidden="true">#</a> b）数组和字符串之间相互转化</h4><p>介绍两个api:</p><ul><li>join 数组.join(&quot;拼接符&quot;) 把数组转化成字符串</li><li>split 字符串.split(&quot;分隔符&quot;) 把字符串转化成数组</li></ul><p>代码演示：</p><h4 id="c-数组元素的crud" tabindex="-1"><a class="header-anchor" href="#c-数组元素的crud" aria-hidden="true">#</a> c）数组元素的CRUD</h4><ul><li>crerate 添加</li><li>read 读取</li><li>update 更新</li><li>delete 删除</li></ul><p>通过两个api，可以添加元素</p><ul><li>push</li><li>unshift</li></ul><p>添加元素，代码演示：</p><p>修改元素代码演示：</p><p>查找元素，代码演示：</p><p>删除元素，也是靠几个api，一个是pop，一个shift，一个是splice，代码演示：</p><h3 id="_3-案例练习与作业" tabindex="-1"><a class="header-anchor" href="#_3-案例练习与作业" aria-hidden="true">#</a> 3，案例练习与作业</h3><ul><li><p>练习一：用户输入一个用户名，存储到数组中，用户再输入一个用户名，再存储到数组中，最后打印出数组</p></li><li><p>练习二：用户可以输入N个用户名，存储到数组中，不想输入了，按Q键可以退出，最后打印出数组</p></li><li><p>练习三：先打印出，欢迎玩XXX游戏，提示用户输入游戏的人数，如果输入的不是数字，一直提示请输入游戏的人数。人数输入完毕后，提示，有xx人参加XXX游戏。再提示输入玩家的性名，存储到数组中，最后打印出哪些人参加了游戏。</p></li><li><p>练习四：自动抽奖，一堆奖品存储到数组中，输入自己的姓名，开始抽奖，直到奖品抽完。</p></li><li><p>练习五：排队买票，一堆人买票，先把一堆人存储到数组中，按Q退出。票数是固定的，先录入姓名的先买，买到票了，就恭喜XXX购票成功。没有买到票的，就提示这些人选择其它的出行方式。</p></li><li><p>练习六：敏感词替换，用户输入一段文本，敏感词存储到数组中，如果文本中出现敏感词，就替换成***</p></li><li><p>练习七：生在如下格式的用户列表 [ [用户名1, 密码1], [用户名1, 密码1], [用户名1, 密码1]..... ]</p><p>[ [&#39;wc&#39;, 123], [&#39;xq&#39;, 456].... ]</p><p>数组中包含数组，叫二维数组，如下图：</p></li><li><p>练习八：有数组user_list = [&quot;王宝强&quot;, &quot;陈羽凡&quot;, &quot;root&quot;, &quot;贾乃亮&quot;, &quot;root&quot;]，删除里面所有的root。</p></li><li><p>练习九：写代码实现以下功能</p><ul><li>如有变量 goods = [&#39;汽车&#39;, &#39;飞机&#39;, &#39;火箭&#39;] 提示用户可供选择的商品：</li></ul></li><li><p>用户输入索引后，将指定商品的内容拼接打印，如：用户输入0，则打印 您选择的商品是汽车。</p></li><li><p>练习十：查找列表li中的元素，移除每个元素的空格，并找出以&quot;a&quot;开头，并添加到一个新数组中, 最后循环打印这个新数组。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      li <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;rootC&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;abC &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;egon&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; riTiAn&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wc&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;  aqc&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>练习十一：将以下车牌中所有 京的车牌搞到一个数组中，并输出京牌车辆的数量。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;京1231&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;冀8899&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;京166631&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;晋989&quot;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>练习十二：生成一个数组，里面有0~50的元素，利用for循环遍历这个数组，找出能被3整除的数，并放到一个新列表中。</p></li><li><p>练习十三：生成一个数组，里面有0~50的元素，利用for循环遍历这个数组，找出能被3整除的数，并插入到列表的第0个索引位置，最终结果如下：[48, 45, 42.....9, 6, 3]</p></li><li><p>练习十四：根据如下规则创建一副扑克牌（排除大小王）。</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>      <span class="token keyword">let</span> color_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;方片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;梅花&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// # 花色列表</span>

      <span class="token keyword">let</span> num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// 牌值，需要自己生成</span>

      <span class="token comment">// 请根据以上的花色和牌值创建一副扑克牌（排除大小王）</span>
      <span class="token comment">// 最终result的结果格式为： [ [&quot;红桃&quot;,1], [&quot;红桃&quot;,2] ... ]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>练习十五：遍历数组[10, 1, 19, 22, 73], 将其中的偶数找出, 保存到一个新的数组中</p></li><li><p>练习十六：将数组中值为0的去掉，不为0的存入一个新数组 [0, &quot;刘备&quot;, 0, &quot;关羽&quot;, 0, &quot;张飞&quot;, 0];</p></li><li><p>练习十七：要求用户输入3个0~9的数，输出0~9中哪些数字用户没有输入过</p></li><li><p>练习十八：从键盘上接收5个0~9的数字，排序后输出，一次性输入5个数字，中间使用逗号隔开</p></li></ul><h2 id="十三-字符串" tabindex="-1"><a class="header-anchor" href="#十三-字符串" aria-hidden="true">#</a> 十三，字符串</h2><h3 id="_1-创建字符串" tabindex="-1"><a class="header-anchor" href="#_1-创建字符串" aria-hidden="true">#</a> 1，创建字符串</h3><p>创建方式：</p><ul><li>可以通过字面量的形式来创建一个字符串</li><li>可以通过new String()来创建一个字符串</li></ul><p>直接上代码：</p><h3 id="_2-访问字符串中的某个字符" tabindex="-1"><a class="header-anchor" href="#_2-访问字符串中的某个字符" aria-hidden="true">#</a> 2，访问字符串中的某个字符</h3><p>访问某个字符的方式：</p><ul><li>通过字符串的索引 str[0]</li><li>通过str.charAt(pos)方法</li><li>它们的区别是索引的方式没有找到会返回undefined，而charAt没有找到会返回空字符串；</li></ul><p>直接上代码：</p><h3 id="_3-字符串的遍历" tabindex="-1"><a class="header-anchor" href="#_3-字符串的遍历" aria-hidden="true">#</a> 3，字符串的遍历</h3><p>遍历：</p><ul><li>普通for循环遍历</li><li>for..of遍历</li></ul><p>直接上代码：</p><h3 id="_4-字符串相关的api" tabindex="-1"><a class="header-anchor" href="#_4-字符串相关的api" aria-hidden="true">#</a> 4，字符串相关的API</h3><p>判断是否以某些字符打头，直接上代码：</p><p>判断以某些字符结尾，直接上代码：</p><p>如果字符串中有空格，还可以除去空格，直接上代码：</p><p>把字符串转大写，或转小写，如下：</p><p>字符串也可以替换，直接上代码：</p><p>字符串切割，可以生成数组，直接上代码：</p><p>一个数组，也可以转化成字符串，直接上代码：</p><h3 id="_5-练习作业题" tabindex="-1"><a class="header-anchor" href="#_5-练习作业题" aria-hidden="true">#</a> 5，练习作业题</h3><ul><li><p>写代码实现一个整数加法计算器(两个数相加)，需求：提示用户输入：5 +9或5+ 9或5 + 9，计算出两个值的和（提示：先分割再去除空白、再转换为数字，再相加）</p></li><li><p>需求：提示用户输入手机号、验证码（随机生成4位验证码），全都验证通过之后才算登录成功（验证码大小写不敏感）</p></li><li><p>实现数据拼接，用户输入一堆爱好，放到数组中，按Q退出，最后打印，&quot;你的爱好是，篮球，足球...&quot;</p></li><li><p>实现字符串的翻转</p></li><li><p>使用for循环实现对字符串 message = &quot;伤情最是晚凉天，憔悴厮人不堪言&quot; 中每个字符进行输出。</p></li><li><p>使用for循环实现输出倒计时效果，例如：输出内容依次是：&quot;倒计时3秒&quot;，&quot;倒计时2秒&quot;，&quot;倒计时1秒&quot;。</p></li><li><p>让用户输入一段文本，请计算文本中 &quot;码&quot; 出现的次数，并输入结果。</p></li><li><p>获取用户两次输入的内容，并提取其中的数字，然后实现数字的相加（转换为整型再相加）</p></li></ul><h2 id="十四-set" tabindex="-1"><a class="header-anchor" href="#十四-set" aria-hidden="true">#</a> 十四，Set</h2><h3 id="_1-set介绍" tabindex="-1"><a class="header-anchor" href="#_1-set介绍" aria-hidden="true">#</a> 1，Set介绍</h3><p>Set集合是一个 无序 、可变、不允许数据重复的容器。Set结构与数组类似，但是成员的值都是唯一的，没有重复值。创建Set我们需要通过Set构造函数（暂时没有字面量创建的方式）, 我们可以发现Set中存放的元素是不会重复的，那么Set有一个非常常用的功能就是给数组去重。</p><p>常用操作方法：</p><ul><li>add(value) : 添加某个值，返回Set结构本身。</li><li>delete(value) : 删除某个值，返回一个布尔值，表示删除是否成功</li><li>has(value) : 返回一个布尔值，表示参数是否为Set的成员.</li><li>clear() : 清除所有成员，没有返回值</li><li>遍历 : 另外Set是支持for of的遍历的</li></ul><p>一般什么时候使用set集合？</p><ul><li>就是想要维护一大堆不重复的数据时，就可以用它。比如：做爬虫去网上找图片的链接，为了避免链接重复，可以选择用集合去存储链接地址。</li></ul><h3 id="_2-常见操作" tabindex="-1"><a class="header-anchor" href="#_2-常见操作" aria-hidden="true">#</a> 2，常见操作</h3><p>add方法，代码演示：</p><p>has方法，代码演示：</p><p>delete方法，代码演示：</p><p>clear方法，代码演示：</p><p>set转数组，数组转set，代码演示：</p><h3 id="_3-练习题" tabindex="-1"><a class="header-anchor" href="#_3-练习题" aria-hidden="true">#</a> 3，练习题</h3><ul><li><p>循环提示用户输入，如果输入值在v1中存在，则追加到v2中，如果v1中不存在，则添加到v1中。（如果输入N或n则停止循环）</p><p>console.log(30%2)</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>	<span class="token keyword">let</span> v1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;admin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> v2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>模拟用户信息录入程序，已录入则不再创建。</p></li><li><p>给你个数组去重。</p></li></ul><h2 id="十五-对象" tabindex="-1"><a class="header-anchor" href="#十五-对象" aria-hidden="true">#</a> 十五，对象</h2><h3 id="_1-什么是对象" tabindex="-1"><a class="header-anchor" href="#_1-什么是对象" aria-hidden="true">#</a> 1，什么是对象</h3><p>对象也是一个容器，里面存储的是键值对，是 无序、键不重复 且 元素只能是键值对的可变的 个 容器。</p><p>直接上代码：</p><p>什么时候会用到对象？</p><ul><li>当我们想要表示一组固定信息时，用对象可以更加的直观，例如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 用户列表</span>
  <span class="token keyword">let</span> user_list <span class="token operator">=</span> <span class="token punctuation">[</span>
      <span class="token punctuation">[</span><span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;123&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">[</span><span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;666&quot;</span><span class="token punctuation">]</span>
  <span class="token punctuation">]</span>

  <span class="token comment">// 用户列表</span>
  user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;root&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;pwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;admin&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;pwd&quot;</span><span class="token operator">:</span> <span class="token string">&quot;123&quot;</span>
  <span class="token punctuation">}</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>还有一种形式创建对象，直接上代码演示：</p><p>访问对象中的某个属性，通过打点可以，也可以通过[]，如下：</p><h3 id="_2-案例练习" tabindex="-1"><a class="header-anchor" href="#_2-案例练习" aria-hidden="true">#</a> 2，案例练习</h3><ul><li><p>把用户信息（用户名和密码）存储到对象中，用户输入用户名和密码实现登录，如果用户名不存储，打印出用户名不存储，如果存储，再比较密码，判断密码是否正确。</p></li><li><p>给出如下对象，按要求练习</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;汪峰&#39;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">48</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;wife&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;国际章&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">38</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
        <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token string">&#39;李杰&#39;</span><span class="token punctuation">,</span>
        <span class="token string-property property">&#39;age&#39;</span><span class="token operator">:</span> <span class="token number">48</span>
    <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;children&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;第一个娃&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;第二个娃&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>

<span class="token comment">// 1. 获取汪峰的妻子名字</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;wife&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 获取汪峰的孩子们</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 3. 获取汪峰的第一个孩子</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token string">&#39;children&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 4. 汪峰的媳妇姓名变更为 章子怡</span>
obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;章子怡&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 5. 汪峰再娶一任妻子</span>
obj<span class="token punctuation">.</span>wife<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token string-property property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;铁锤&quot;</span><span class="token punctuation">,</span>
    <span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">19</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>wife<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 6. 给汪峰添加一个爱好：吹牛逼</span>
obj<span class="token punctuation">.</span>hobby <span class="token operator">=</span> <span class="token string">&#39;吹牛逼&#39;</span>
obj<span class="token punctuation">[</span><span class="token string">&#39;hobby1&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;吹牛逼1&#39;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>hobby<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>hobby1<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 7. 删除汪峰的年龄</span>
<span class="token keyword">delete</span> obj<span class="token punctuation">.</span>age<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据需求写代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;k1&#39;</span><span class="token operator">:</span> <span class="token string">&quot;v1&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;k2&quot;</span><span class="token operator">:</span> <span class="token string">&quot;v2&quot;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&quot;k3&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 请在对象中添加一个键值对，&quot;k4&quot;: &quot;v4&quot;，输出添加后的对象</span>
  <span class="token comment">// 请在修改对象中 &quot;k1&quot; 对应的值为 &quot;root&quot;，输出修改后的对象</span>
  <span class="token comment">// 请在k3对应的值中追加一个元素 44，输出修改后的对象</span>
  <span class="token comment">// 请在k3对应的值的第 1 个位置插入个元素 18，输出修改后的对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据需求写代码</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;name&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;job&#39;</span><span class="token operator">:</span> <span class="token string">&#39;teacher&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;ok&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
          <span class="token string-property property">&#39;root&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;python1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;python2&#39;</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// 1，将name对应的列表追加⼀个元素’admin’。</span>
  <span class="token comment">// 2，将name对应的列表中的root全变成大写。</span>
  <span class="token comment">// 3，ok对应的对象加⼀个键值对’bad’:’linux’。</span>
  <span class="token comment">// 4，将ok对应的对象中的root对应的列表中的python2删除</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>循环提示用户输入，并将输入内容添加到对象中（如果输入N或n则停止循环）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code> <span class="token comment">// 例如：用户输入 x1|admin ,则需要再对象中添加键值对 {&#39;x1&#39;:&quot;admin&quot;}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>将对象的键和值分别追加到 key_list 和 value_list 两个列表中，如：</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> key_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> value_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;k1&#39;</span><span class="token operator">:</span> <span class="token string">&#39;v1&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;k2&#39;</span><span class="token operator">:</span> <span class="token string">&#39;v2&#39;</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;k3&#39;</span><span class="token operator">:</span> <span class="token string">&#39;v3&#39;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>对象dic = {&#39;k1&#39;: &quot;v1&quot;, &quot;k2&quot;: &quot;v2&quot;, &quot;k3&quot;: [11, 22, 33]}</p><ul><li>请循环输出所有的key</li><li>请循环输出所有的value</li><li>请循环输出所有的key和value</li></ul></li><li><p>有字符串&quot;k: 1|k1:2|k2:3 |k3 :4&quot; 处理成对象 {&#39;k&#39;:1, &#39;k1&#39;:2....}</p></li><li><p>写代码</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 有如下值 li= [11,22,33,44,55,66,77,88,99,90] ,将所有大于 66 的值保存至字典的第一个key对应的列表中，将小于 66 的值保存至第二个key对应的列表中。</span>

result <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;k1&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token string-property property">&#39;k2&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>输出商品列表，用户输入序号，显示用户选中的商品</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>     <span class="token comment">/*
     商品列表：
       let goods = [
     		{&quot;name&quot;: &quot;电脑&quot;, &quot;price&quot;: 1999},
     		{&quot;name&quot;: &quot;鼠标&quot;, &quot;price&quot;: 10},
     		{&quot;name&quot;: &quot;游艇&quot;, &quot;price&quot;: 20},
     		{&quot;name&quot;: &quot;美女&quot;, &quot;price&quot;: 998}
     	]
     要求:
     1：页面显示 序号 + 商品名称 + 商品价格，如：
                 1     电脑      1999 
                 2     鼠标       10
     	         ...
     2：用户输入选择的商品序号，然后打印商品名称及商品价格
     3：如果用户输入的商品序号有误，则提示输入有误，并重新输入。
     4：用户输入Q或者q，退出程序。
     */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>按要求完成下面题目</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">/*
  结合下面的两个变量 header 和 stock_dict 实现注意输出股票信息，格式如下：
      SH601778，股票名称:中国晶科、当前价:6.29、涨跌额:+1.92。
      SH688566，股票名称:吉贝尔、当前价:...
      ...
  */</span>

  <span class="token keyword">let</span> header <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;股票名称&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;当前价&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;涨跌额&#39;</span><span class="token punctuation">]</span>
  <span class="token keyword">let</span> stock_dict <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token string-property property">&#39;SH601778&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;中国晶科&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;6.29&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+1.92&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;SH688566&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;吉贝尔&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;52.66&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+6.96&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;SH688268&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;华特气体&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;88.80&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+11.72&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token string-property property">&#39;SH600734&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;实达集团&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2.60&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;+0.24&#39;</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>写代码实现，车牌的区域划分。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> car_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;鲁A32444&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沪B12333&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;京B8989M&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;京C49678&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;黑C46555&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;晋B25041&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;沪C34567&#39;</span><span class="token punctuation">]</span>

  <span class="token comment">// 根据以上代码获取各省车牌数量，例如：info = {&quot;沪&quot;:2,&quot;京&quot;:2 ...}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>写代码实现，数据格式化处理。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">id,name,age,phone,job 
  1, root, 22, 13651054608, IT 
  2, admin, 23, 13304320533, Tearcher
  3, ok, 18, 1333235322, IT&#39;</span><span class="token template-punctuation string">\`</span></span>

  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// 将上述数据处理为如下格式的结果：</span>
  <span class="token comment">//    info = [{&#39;id&#39;:&#39;1&#39;,&#39;name&#39;:&#39;root&#39;,&#39;age&#39;:&#39;22&#39;,&#39;phone&#39;:&#39;13651054608&#39;,&#39;job&#39;:&#39;IT&#39;},.... ..]</span>
  <span class="token comment">// 提示：text的内容是根据 \\n 分割（\\n表示回车换行）。</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>写代码实现 累乘计算器。</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 用户可能输入 5*9*99.... 或 5* 9 * 10 * 99 或 5 * 9 * 99...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p>使用for循环实现输出 9*9 乘法表</p></li><li><p>棋牌游戏11点</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>需求：
      <span class="token number">1</span>）生成一副扑克牌（ 自己设计扑克牌的结构， 小王和大王可以分别用<span class="token number">14</span>、 <span class="token number">15</span> 表示） 
      <span class="token number">2</span>）<span class="token number">3</span> 个玩家 <span class="token keyword">let</span> user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;wc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ml&#39;</span><span class="token punctuation">]</span> 
      <span class="token number">3</span>）发牌规则 
		a<span class="token punctuation">)</span>默认先给用户发一张牌， 其中 <span class="token constant">J</span>、 <span class="token constant">Q</span>、 <span class="token constant">K</span>、 小王、 大王代表的值为<span class="token number">0</span> <span class="token number">.5</span>， 其他就是则就是当前的牌面值。
        b<span class="token punctuation">)</span>用户根据自己的情况判断是否继续要牌。 
              i<span class="token punctuation">)</span>要， 则再给他发一张。 
              ii<span class="token punctuation">)</span>不要， 则开始给下个玩家发牌。 
	    c<span class="token punctuation">)</span>如果用户手中的所有牌相加大于<span class="token number">11</span>， 则表示爆了， 此人的分数为<span class="token number">0</span>， 并且自动开始给下个人发牌。 
	    
      <span class="token number">4</span>）最终计算并获得每个玩家的分值， 例如：
          result <span class="token operator">=</span> <span class="token punctuation">{</span>
              <span class="token string-property property">&quot;wc&quot;</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>
              <span class="token string-property property">&quot;xq&quot;</span><span class="token operator">:</span> <span class="token number">9</span><span class="token punctuation">,</span>
              <span class="token string-property property">&quot;ml&quot;</span><span class="token operator">:</span> <span class="token number">0</span>
          <span class="token punctuation">}</span>

  思考： 如何实现随机抽牌？
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先实现随机抽牌，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> total_poke_list <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;大王&quot;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&quot;小王&quot;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 随机生成一个数，当成索引</span>
    <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_poke_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取牌</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;抽到的牌为：&quot;</span><span class="token punctuation">,</span> total_poke_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 删除抽走的牌  data是删除的那个牌</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> total_poke_list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// console.log(data);</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;抽完之后，剩余的牌为：&quot;</span><span class="token punctuation">,</span> total_poke_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>生成一副扑克牌，如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;wc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ml&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 1，生成一副扑克</span>
    <span class="token keyword">let</span> total_poke_list <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&#39;小王&#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;大王&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> color_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;方片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;梅花&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,...13]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> color_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> color <span class="token operator">=</span> color_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            total_poke_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>total_poke_list<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一次发牌，代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;wc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ml&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token comment">// 1，生成一副扑克</span>
    <span class="token keyword">let</span> total_poke_list <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&#39;小王&#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;大王&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> color_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;方片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;梅花&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,...13]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> color_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> color <span class="token operator">=</span> color_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            total_poke_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2，发牌</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> user_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> user <span class="token operator">=</span> user_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 给用户发第一张牌</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_poke_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> poke <span class="token operator">=</span> total_poke_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;花色&#39;,值]</span>
        total_poke_list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 删除牌</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// value是牌值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        score <span class="token operator">+=</span> value<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">给</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">发的牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,此时牌面分:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>score<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续发牌，代码如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>utf-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> user_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;wc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;xq&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ml&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 1，生成一副扑克</span>
    <span class="token keyword">let</span> total_poke_list <span class="token operator">=</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&#39;小王&#39;</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        <span class="token punctuation">[</span><span class="token string">&#39;大王&#39;</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> color_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;红桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;黑桃&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;方片&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;梅花&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">let</span> num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [1,2,3,4,...13]</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        num_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> color_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> color <span class="token operator">=</span> color_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> item <span class="token operator">=</span> <span class="token punctuation">[</span>color<span class="token punctuation">,</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>
            total_poke_list<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 2，发牌</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> idx <span class="token keyword">in</span> user_list<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> user <span class="token operator">=</span> user_list<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token comment">// 给用户发第一张牌</span>
        <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_poke_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> poke <span class="token operator">=</span> total_poke_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;花色&#39;,值]</span>
        total_poke_list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 删除牌</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// value是牌值</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            value <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        score <span class="token operator">+=</span> value<span class="token punctuation">;</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">给</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">发的牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,此时牌面分:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>score<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 3，继续发牌</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> choice <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&quot;是否继续要牌（Y/N）?&quot;</span><span class="token punctuation">)</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&#39;Y&#39;</span> <span class="token operator">&amp;&amp;</span> choice<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;输入错误，请重新输入。&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>choice<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;N&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">不要牌了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// 继续要牌</span>
            <span class="token keyword">let</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> total_poke_list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> poke <span class="token operator">=</span> total_poke_list<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;花色&#39;,值]</span>
            total_poke_list<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 删除牌</span>
            <span class="token keyword">let</span> value <span class="token operator">=</span> poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// value是牌值</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                value <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            score <span class="token operator">+=</span> value<span class="token punctuation">;</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">给</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">发的牌：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>poke<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,此时牌面分:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>score<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// 大于11分，用户爆了，分值为0分</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>score <span class="token operator">&gt;</span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>user<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">爆了</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                score <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        result<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="十六-math和date" tabindex="-1"><a class="header-anchor" href="#十六-math和date" aria-hidden="true">#</a> 十六，Math和Date</h2><h3 id="_1-math介绍" tabindex="-1"><a class="header-anchor" href="#_1-math介绍" aria-hidden="true">#</a> 1，Math介绍</h3><p>Math是一个内置对象（不是一个构造函数），它拥有一些数学常数属性和数学函数方法。它里面提供了很多的属性和方法。</p><ul><li>Math. PI：圆周率，约等于 3.14159；</li><li>Math.floor：向下舍入取整</li><li>Math.ceil：向上舍入取整</li><li>Math.round：四舍五入取整</li><li>Math.random：生成0~1的随机数（包含0，不包含1）</li><li>Math.pow(x, y)：返回x的y次幂</li><li>....</li></ul><p>代码演示：</p><h3 id="_2-date日期" tabindex="-1"><a class="header-anchor" href="#_2-date日期" aria-hidden="true">#</a> 2，Date日期</h3><p>历史：</p><ul><li>最初，人们是通过观察太阳的位置来决定时间的，但是这种方式有一个最大的弊端就是不同区域位置大家使用的时间是不一致的，相互之间没有办法通过一个统一的时间来沟通、交流。</li><li>之后，人们开始制定的标准时间是英国伦敦的皇家格林威治（ Greenwich ）天文台的标准时间（刚好在本初子午线经过的地方），这个时间也称之为GMT（Greenwich Mean Time），其他时区根据标准时间来确定自己的时间，往东的时区（GMT+hh:mm），往西的时区（GMT+hh:mm）；</li><li>但是，根据公转有一定的误差，也会造成GMT的时间会造成一定的误差，于是就提出了根据原子钟计算的标准时间UTC（Coordinated Universal Time）</li><li>目前GMT依然在使用，主要表示的是某个时区中的时间，而UTC是标准的时间。</li></ul><p>代码演示：</p><p>Date获取信息的方法：</p><ul><li>getFullYear()：获取年份（4 位数）</li><li>getMonth()：获取月份，从 0 到 11；</li><li>getDate()：获取当月的具体日期，从 1 到 31；</li><li>getHours()：获取小时；</li><li>getMinutes()：获取分钟；</li><li>getSeconds()：获取秒钟；</li><li>getMilliseconds()：获取毫秒；</li></ul><p>代码演示：</p><p>Date获取Unix时间戳：</p><ul><li>时间戳：它是一个整数值，表示自1970年1月1日00:00:00 UTC以来的毫秒数。</li><li>方式一：new Date().getTime()</li><li>方式二：new Date().valueOf()</li><li>方式三：+new Date()</li><li>方式四：Date.now()</li></ul><p>代码如下：</p><h3 id="_3-练习题-1" tabindex="-1"><a class="header-anchor" href="#_3-练习题-1" aria-hidden="true">#</a> 3，练习题</h3><ul><li><p>生成指定的随机数</p></li><li><p>随机一个16进制的颜色</p></li><li><p>输入一个数，如果是负数，则输出绝对值，如果是小数，则四舍五入，如果是整数，则求其3次幂</p></li><li><p>计算两个日期的天数差</p></li></ul><h2 id="十七-函数" tabindex="-1"><a class="header-anchor" href="#十七-函数" aria-hidden="true">#</a> 十七，函数</h2><h3 id="_1-初识函数" tabindex="-1"><a class="header-anchor" href="#_1-初识函数" aria-hidden="true">#</a> 1，初识函数</h3><p>函数，可以当做是一大堆功能代码的集合。就是某段代码的封装，这段代码帮助我们完成某一个功能。默认情况下，JS引擎也帮我提供了一些函数，我们也可以编写自己的函数。</p><p>目前我们已经接触的函数：</p><ul><li>alert函数</li><li>prompt函数</li><li>console.log函数</li><li>String/Number/Boolean函数</li></ul><p>什么时候会使用到函数：</p><ul><li>有重复代码，用函数增加代码的重用性。</li><li>代码太长，用函数增强代码的可读性。</li></ul><p>以前我们变成是按照业务逻辑从上到下逐步完成，称为：面向过程编程；现在学了函数之后，利用函数编程称为：函数式编程。</p><p>函数声明和函数表达式：</p><ul><li>使用function关键字来声明一个函数，也可以把一个函数赋值给一个变量，我们叫函数表达式</li></ul><p>直接上代码：</p><p>函数声明的注意细节：</p><ul><li>函数名的命名规则和前面变量名的命名规则是相同的</li><li>函数定义完后里面的代码是不会执行的，函数必须调用才会执行</li><li>函数要尽量做到见名知意，学习时，使用foo，bar，fn，gn....</li><li>由于函数一般是为了实现某个功能才定义的， 所以通常我们将函数名命名为动词，比如 getSum</li></ul><p>函数调用：</p><ul><li>调用函数是让已存在的函数为我们所用</li><li>可以是自己写的函数，也可以是系统中内置的，也可以是第三方的</li><li>调用的时候千万不要忘记添加小括号</li></ul><p>直接上代码：</p><h3 id="_2-作用域-局部变量和全局变量" tabindex="-1"><a class="header-anchor" href="#_2-作用域-局部变量和全局变量" aria-hidden="true">#</a> 2，作用域（局部变量和全局变量）</h3><p>局部变量和全局变量：</p><ul><li>局部变量就是只能在一定范围内使用，一般在函数内部的变量都是局部变量</li><li>全局变量就是在全局哪里都可以使用</li></ul><p>全局作用域和局部作用域：</p><ul><li>函数体内部所对应的空间就是局部作用域</li><li>函数体外部所对应的空间主浊全局作用域</li></ul><p>代码如下：</p><h3 id="_3-函数的参数" tabindex="-1"><a class="header-anchor" href="#_3-函数的参数" aria-hidden="true">#</a> 3，函数的参数</h3><p>在定义函数时，如果在括号中添加 变量 ，我们称它为函数的形式参数：</p><h3 id="_4-函数的返回值" tabindex="-1"><a class="header-anchor" href="#_4-函数的返回值" aria-hidden="true">#</a> 4，函数的返回值</h3><p>调用一个函数，函数是可以给我们返回一个数据的，通过return关键字实现返回，直接上代码：</p><p>如果函数没有写return，它默认返回und，如下：</p><h3 id="_5-作业" tabindex="-1"><a class="header-anchor" href="#_5-作业" aria-hidden="true">#</a> 5，作业</h3><ul><li><p>请定义一个函数，用于计算一个字符串中字符a出现的次数并通过return返回。</p></li><li><p>写函数，判断用户传入的一个值（字符串或数组）长度是否大于5，并返回真假。</p></li><li><p>写函数，接收两个数字参数，返回比较大的那个数字（等于时返回两个中的任意一个都可以）。</p></li><li><p>封装一个可以生成验证码的函数，传入4，就生成4位验证码，传入6，就会生6位验证码。</p></li><li><p>封装函数，判断一个年份是否是润年。</p></li><li><p>封装函数，翻转任意数组。</p></li><li><p>封装函数，函数求任意个数的最大值。</p></li><li><p>封装函数，函数，能判断传入的一个数值是否是质数。</p></li></ul><h3 id="_6-函数本质也是数据" tabindex="-1"><a class="header-anchor" href="#_6-函数本质也是数据" aria-hidden="true">#</a> 6，函数本质也是数据</h3><p>函数本质也是一个数据，数据类型是function，如下：</p><p>开发一个类似微信的功能，每个功能都可以封装成一个函数，用户选择不同的功能，就可以调用不同的函数，如下：</p><p>把函数名放在一个对象中，如下：</p><p>如果要传参，操作如下：</p><p>假如发生某个事，我们不只要发短信，发微信，邮件。这三件要同事做，代码如下：</p><p>此时，还可以把函数放到的容器中，如下：</p><p>上面的代码如何传参？如下：</p><h2 id="十八-练习题-选做" tabindex="-1"><a class="header-anchor" href="#十八-练习题-选做" aria-hidden="true">#</a> 十八，练习题（选做）</h2><ul><li>求100-1000以内的所有回文数，即从前往后和从后往前读都一样的数字</li><li>根据年月日三个变量，计算出是那一年的第几天</li><li>在页面上输出1-1000以内所有同时能被3、5、7整除的数字，并要求每行6个显示在页面上</li><li>编写一个函数，只有一个参数，该函数的功能是将作为参数的数组去重并返回一个去重后的数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,532),Q=[z];function R(K,W){return s(),a("div",null,Q)}const V=n(Y,[["render",R],["__file","03JS.html.vue"]]);export{V as default};
