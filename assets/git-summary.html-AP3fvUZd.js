import{_ as o,r as s,o as l,c as a,a as t,b as e,d as n,e as r}from"./app-HbT6gJn_.js";const p="/Timmyblog/assets/1709511333351.e0a2f54e-uB5u7JnA.png",h="/Timmyblog/assets/1698278442376.065e0feb-M2Pr17Fl.png",c="/Timmyblog/assets/1698278573069.6b891745-gcoTSDcH.png",_="/Timmyblog/assets/1698278644465.b77bae5f-_cqfkSzZ.png",g="/Timmyblog/assets/1688001607466.afa82c7c-WgZ_ks4a.png",u="/Timmyblog/assets/1688001630667.4fb9bd9c-CwFs6Okn.png",m="/Timmyblog/assets/1688001683405.16c2f84c-20JtxZLj.png",d="/Timmyblog/assets/1688001718365.7cdf162e-RZkEmqcy.png",w="/Timmyblog/assets/1688001727345.d989c883-lfmfnc-2.png",b="/Timmyblog/assets/1688001744749.fdb15371-ZzUqByM-.png",f="/Timmyblog/assets/1688001782804.b60a7cc3-lFa8KnAt.png",G="/Timmyblog/assets/1688001927913.6440c18c-Oiv_wlUv.png",v={},y=r('<h1 id="git操作" tabindex="-1"><a class="header-anchor" href="#git操作" aria-hidden="true">#</a> Git操作</h1><h2 id="一-什么是git" tabindex="-1"><a class="header-anchor" href="#一-什么是git" aria-hidden="true">#</a> 一，什么是Git</h2><p>Git就是一个<strong>分布式</strong><u>版本控制</u>(CVS)系统和源代码管理(SCM)系统。</p><p>为什么要用Git?</p><p>想象在开发中可能会遇到的几个痛点。如下：</p><ul><li><p><strong>痛点一</strong>：旺财(wc)负责的模块就要完成了，就在即将提交发布之前的一瞬间，电脑<u>突然蓝屏</u>，硬盘光荣下岗！就意味着wc写的<strong>代码就丢失</strong>了。</p></li><li><p><strong>痛点二</strong>：wc需要在项目中加入一个很复杂的功能，一边尝试，一边修改代码，就这样摸索了一个星期。 可是这被改得面目全非的代码已经<strong>回不到从前</strong>了。</p></li><li><p><strong>痛点三</strong>：如果项目中的bug过多，需要<strong>追溯责任</strong>。但找不到是哪些代码引起的.</p></li></ul><p>此时，就需要使用到git系统了。</p><p>总结在开发项目中，Git的作用：</p><ul><li><p>代码备份</p><p><img src="'+p+'" alt="1709511333351"></p></li><li><p>版本控制</p></li><li><p>协同开发</p></li><li><p>责任追溯</p></li></ul><p><strong>Git是目前最流行的分布式版本控制软件</strong></p><h3 id="什么是版本控制-有哪三类" tabindex="-1"><a class="header-anchor" href="#什么是版本控制-有哪三类" aria-hidden="true">#</a> 什么是版本控制?有哪三类?</h3><p>版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 如果你是位网页设计师，可能会需要保存某一个页面布局文件的所有修订版本，采用版本控制系统（CVS Concurrent Versions System）是个明智的选择。 有了它你就可以将选定的<u>文件回溯</u>到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而<u>找出</u>导致怪异问题出现的<u>原因</u>，又是谁在何时报告了某个功能缺陷等等。</p><h4 id="_1-本地版本控制" tabindex="-1"><a class="header-anchor" href="#_1-本地版本控制" aria-hidden="true">#</a> 1)本地版本控制</h4><p>电脑本地记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如 RCS</p><p><img src="'+h+'" alt="1698278442376"></p><h4 id="_2-集中版本控制" tabindex="-1"><a class="header-anchor" href="#_2-集中版本控制" aria-hidden="true">#</a> 2)集中版本控制</h4><ul><li>所有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</li><li>用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看不到历史版本，也无法切换版本</li><li>所有数据都保存在单一的服务器上，如果这个服务器会损坏(有很大的风险), 这样就会丢失所有的数据，需要定期备份</li><li>代表产品：SVN、CVS、VSS</li></ul><p><img src="'+c+'" alt="1698278573069"></p><h4 id="_3-分布式版本控制" tabindex="-1"><a class="header-anchor" href="#_3-分布式版本控制" aria-hidden="true">#</a> 3)分布式版本控制</h4><ul><li>所有版本信息仓库全部同步到本地的每个用户</li><li>可以在本地查看所有版本历史，可以离线在本地提交，只需在连网时push 到相应的服 务器或其他用户那里。</li><li>每个用户那里保存的都是所有的版本数据，只要有一个用户的设备没有问题就可以恢复所有的数据</li><li>更加安全不会因为服务器损坏或者网络问题，造成不能工作的情况</li><li>代表软件: Git</li></ul><p><img src="'+_+'" alt="1698278644465"></p><h3 id="_3-git的下载和安装" tabindex="-1"><a class="header-anchor" href="#_3-git的下载和安装" aria-hidden="true">#</a> 3，Git的下载和安装</h3><p>官网下载git软件：https://git-scm.com/downloads</p><p>下载慢，可以到镜像下载 : http://npm.taobao.org/mirrors/git-for-windows/</p><p><img src="'+g+'" alt="1688001607466"></p><p>安装是傻瓜式安装：</p><ul><li>第一步：双击安装包，进入安装界面</li></ul><p><img src="'+u+'" alt="1688001630667"></p><ul><li>第二步：指定安装目录</li></ul><p><img src="'+m+'" alt="1688001683405"></p><ul><li>第三步：一路next下去</li></ul><p><img src="'+d+'" alt="1688001718365"></p><p><img src="'+w+'" alt="1688001727345"></p><ul><li>第四步：安装完成</li></ul><p><img src="'+b+'" alt="1688001744749"></p><p>安装完成后，在电脑桌面上，右键，可以看到两个菜单，如下：</p><p><img src="'+f+'" alt="1688001782804"></p><p>上面的Git GUI Here表示Git提供的图形界面工具，Git Bash是Git提供的命令行工具（我们使用的）。</p><p>打开Git Bah Here，输入git --version命令，可以查看git软件的版本，如下：</p><p><img src="'+G+'" alt="1688001927913"></p><h3 id="_4-git资料" tabindex="-1"><a class="header-anchor" href="#_4-git资料" aria-hidden="true">#</a> 4，Git资料</h3><p>命令地址: https://gitee.com/all-about-git</p><p>Git 互动学习：https://oschina.gitee.io/learn-git-branching/</p>',43),k={id:"git面试题和答案",tabindex:"-1"},q=t("a",{class:"header-anchor",href:"#git面试题和答案","aria-hidden":"true"},"#",-1),S={href:"https://www.yiibai.com/interview/2500",target:"_blank",rel:"noopener noreferrer"},T=t("p",null,"1、Git是什么？",-1),I={href:"https://www.yiibai.com/interview/question/1213335.html",target:"_blank",rel:"noopener noreferrer"},x=t("p",null,"2、Git使用哪种语言来编写？",-1),C={href:"https://www.yiibai.com/interview/question/1213340.html",target:"_blank",rel:"noopener noreferrer"},V=t("p",null,"3、Git中的存储库是什么？",-1),H={href:"https://www.yiibai.com/interview/question/1213345.html",target:"_blank",rel:"noopener noreferrer"},N=t("p",null,"4、Git中的“裸仓库”是什么？",-1),U={href:"https://www.yiibai.com/interview/question/1213351.html",target:"_blank",rel:"noopener noreferrer"},B=t("p",null,"5、GIT stash存储的目的是什么？",-1),E={href:"https://www.yiibai.com/interview/question/1213361.html",target:"_blank",rel:"noopener noreferrer"},L=t("p",null,"6、GIT stash drop 是什么？",-1),M={href:"https://www.yiibai.com/interview/question/1213364.html",target:"_blank",rel:"noopener noreferrer"},Z=t("p",null,"7、使用 GIT 有什么好处？",-1),F={href:"https://www.yiibai.com/interview/question/1213373.html",target:"_blank",rel:"noopener noreferrer"},P=t("p",null,[e("8、GIT中"),t("code",null,"GIT PUSH"),e("的功能是什么？")],-1),A={href:"https://www.yiibai.com/interview/question/1213378.html",target:"_blank",rel:"noopener noreferrer"},O=t("p",null,"9、为什么需要在 GIT 中进行分支？",-1),z={href:"https://www.yiibai.com/interview/question/1213381.html",target:"_blank",rel:"noopener noreferrer"},J=t("p",null,[e("10、"),t("code",null,"git config"),e("的目的是什么？")],-1),R={href:"https://www.yiibai.com/interview/question/1213391.html",target:"_blank",rel:"noopener noreferrer"},X=t("p",null,"11、GIT中“索引”或“暂存区”的定义是什么？",-1),j={href:"https://www.yiibai.com/interview/question/1213400.html",target:"_blank",rel:"noopener noreferrer"},D=t("p",null,"12、git中的“冲突”是什么？",-1),K={href:"https://www.yiibai.com/interview/question/1213409.html",target:"_blank",rel:"noopener noreferrer"},W=t("p",null,"13、git pull 和 git fetch 有什么区别？",-1),Q={href:"https://www.yiibai.com/interview/question/1213415.html",target:"_blank",rel:"noopener noreferrer"},Y=t("p",null,"14、如何解决 Git 中的冲突？",-1),$={href:"https://www.yiibai.com/interview/question/1213424.html",target:"_blank",rel:"noopener noreferrer"},tt=t("p",null,"15、git clone 的目的是什么？",-1),et={href:"https://www.yiibai.com/interview/question/1213433.html",target:"_blank",rel:"noopener noreferrer"},it=t("p",null,"16、git pull origin是什么？",-1),nt={href:"https://www.yiibai.com/interview/question/1213442.html",target:"_blank",rel:"noopener noreferrer"},rt=t("p",null,"17、git commit是什么？",-1),ot={href:"https://www.yiibai.com/interview/question/1213447.html",target:"_blank",rel:"noopener noreferrer"},st=t("p",null,"18、为什么 GIT 比 Subversion 更好？",-1),lt={href:"https://www.yiibai.com/interview/question/1213450.html",target:"_blank",rel:"noopener noreferrer"},at=t("p",null,"19、提交消息是什么？",-1),pt={href:"https://www.yiibai.com/interview/question/1213459.html",target:"_blank",rel:"noopener noreferrer"},ht=t("p",null,"20、为什么需要创建额外的提交而不是修改现有的提交？",-1),ct={href:"https://www.yiibai.com/interview/question/1213466.html",target:"_blank",rel:"noopener noreferrer"},_t=t("p",null,"21、Git 中的“钩子”包括什么？",-1),gt={href:"https://www.yiibai.com/interview/question/1213472.html",target:"_blank",rel:"noopener noreferrer"},ut=t("p",null,"22、Git 和 Github 有什么区别？",-1),mt={href:"https://www.yiibai.com/interview/question/1213476.html",target:"_blank",rel:"noopener noreferrer"},dt=r(`<p>23、在 Git 中将如何返回刚刚推送并打开的提交？</p><p>这个问题可以有两个答案，并确保将两者结合起来，因为可以根据具体情况使用以下任何选项： 在另一个提交中删除或修复坏文档并将其推送到远程存储库。这是纠正错误的独特方法。对记录进行必要的更改后，将其提交到我将使用的远程存储库。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>git submit <span class="token operator">-</span> m <span class="token string">&quot;commit message.&quot;</span>\\n
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>再次提交以修复在糟糕提交中所做的所有更改。为此，将使用一个命令：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code>git revert <span class="token operator">&lt;</span>name of bad commit<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>24、Commit项包含什么？</p>`,6),wt={href:"https://www.yiibai.com/interview/question/1213489.html",target:"_blank",rel:"noopener noreferrer"},bt=t("p",null,"25、使用过的分支系统有哪些？",-1),ft={href:"https://www.yiibai.com/interview/question/1213495.html",target:"_blank",rel:"noopener noreferrer"},Gt=t("p",null,"26、如果一个分支刚刚合并到 master 中，在 Git 中通过什么方法？",-1),vt={href:"https://www.yiibai.com/interview/question/1213500.html",target:"_blank",rel:"noopener noreferrer"},yt=t("p",null,"27、如何修复一个混乱的提交？",-1),kt={href:"https://www.yiibai.com/interview/question/1213507.html",target:"_blank",rel:"noopener noreferrer"},qt=t("p",null,"28、Git 存储库托管有哪些？",-1),St={href:"https://www.yiibai.com/interview/question/1213512.html",target:"_blank",rel:"noopener noreferrer"},Tt=t("p",null,"29、LINUX 图形 GIT 客户端有哪些？",-1),It={href:"https://www.yiibai.com/interview/question/1213522.html",target:"_blank",rel:"noopener noreferrer"},xt=t("p",null,"30、什么是 Subgit？ 为什么要使用它？",-1),Ct={href:"https://www.yiibai.com/interview/question/1213530.html",target:"_blank",rel:"noopener noreferrer"};function Vt(Ht,Nt){const i=s("ExternalLinkIcon");return l(),a("div",null,[y,t("h2",k,[q,e(" Git面试题和"),t("a",S,[e("答案"),n(i)])]),T,t("p",null,[e("Git是一个开源的分布式版本控制系统和源代码管理(SCM)系统，坚持以速度和效率控制大小项目。 "),t("a",I,[e("完整答案"),n(i)])]),x,t("p",null,[e("Git 使用C语言。Git 速度很快，而C语言通过减少高级语言包含的运行时间开销使这成为可能。 "),t("a",C,[e("完整答案"),n(i)])]),V,t("p",null,[e("存储库由一个名为 .git 的列表组成，其中 git 保存目录的所有元数据。.git 文件的内容是 Git 私有的。 "),t("a",H,[e("完整答案"),n(i)])]),N,t("p",null,[e("Git中的“裸”存储库包括版本控制信息和没有工作文件(没有树)，它不包括特殊的。.git 子目录。相反，它包含 .git 子目录的所有内容，直接在主目录本身中，而工作列表包括： 一个 .git 子目录，其中包含 repo 的所有 Git 相关修订历史记录。工作树，或找出项目文件的副本。 "),t("a",U,[e("完整答案"),n(i)])]),B,t("p",null,[e("GIT stash 获取工作文件和索引的当前状态并放入堆栈以供下一步使用，并返回一个干净的工作文件。因此，如果在对象中间并需要跳转到其他任务，同时不想丢失当前的编辑，可以使用 GIT stash。 "),t("a",E,[e("完整答案"),n(i)])]),L,t("p",null,[e("当完成隐藏元素或想要从目录中删除它时，运行 git stash drop 命令。默认情况下，它将删除最后添加的存储项，如果包含作为参数，它还可以删除特定主题。 "),t("a",M,[e("完整答案"),n(i)])]),Z,t("p",null,[e("以下是 Git 的一些基本优势/好处： 数据重复和数据复制是可能的这是一项非常适用的服务对于一个存储库，只能拥有一个 Git 目录网络性能和磁盘应用都很出色在任何项目上协作都毫不费力可以在 Git 中制定任何计划 "),t("a",F,[e("完整答案"),n(i)])]),P,t("p",null,[e("GIT PUSH 更新远程引用以及相关对象。 "),t("a",A,[e("完整答案"),n(i)])]),O,t("p",null,[e("使用分支，可以保留分支，也可以在不同的分支之间跳转(切换)。可以继续过去的工作，同时保持最近的工作不变。 "),t("a",z,[e("完整答案"),n(i)])]),J,t("p",null,[e("git config是配置选择的 Git 安装的好方法。使用此命令，可以描述存储库行为、首选项和用户信息。 "),t("a",R,[e("完整答案"),n(i)])]),X,t("p",null,[e("当进行提交时，可以对其进行创新、格式化并在称为“暂存区”或“索引”的公共区域中对其进行审查。 "),t("a",j,[e("完整答案"),n(i)])]),D,t("p",null,[e("当必须合并的提交在一个地方有一些变化时，就会出现“冲突”，而当前行为在同一个地方也有变化。Git 将不容易预测哪个更改应该优先。 "),t("a",K,[e("完整答案"),n(i)])]),W,t("p",null,[e("git pull 命令从中央存储库的特定分支中提取创新或提交，并更新本地存储库中的对象分支。git fetch 也用于相同的目标，但它的工作方式略有不同。当执行 git fetch 时，它会从所需分支中提取所有新提交并将其保存在本地存储库的新分支中。如果需要在目标分支中反映这些更改，则应在 git fetch 之后执行 git merge。目标分支只有在合并目标分支和获取的分支后才会恢复。为了简单起见，请记住以下等式： Git pull = git fetch + git merge "),t("a",Q,[e("完整答案"),n(i)])]),Y,t("p",null,[e("如果需要解决 Git 中的冲突，编辑修复不同更改的列表，然后可以运行git add添加已解决的目录，然后可以运行git commit提交修复的目录合并。 "),t("a",$,[e("完整答案"),n(i)])]),tt,t("p",null,[e("git clone 命令生成当前 Git 存储库的副本。要获得中央存储库的副本，“克隆”是程序员使用的最简单的方法。 "),t("a",et,[e("完整答案"),n(i)])]),it,t("p",null,[e("pull是一种获取和整合。‘git pull origin master’ 从源远程的 master 分支(进入本地 origin/master 分支)带来提交，然后将 origin/master 合并到您当前查看的分支中。 "),t("a",nt,[e("完整答案"),n(i)])]),rt,t("p",null,[e("Git 提交“记录对仓库的更改”，git push “更新远程引用以及包含的对象”因此第一个用于与本地存储库的网络，而后一个用于与远程存储库通信。 "),t("a",ot,[e("完整答案"),n(i)])]),st,t("p",null,[e("GIT 是一个开源版本控制框架； 它将使您能够运行任务的“改编”，该任务展示了随着时间的推移对代码所做的更改，它还允许在重要时保持回溯并修复这些更改。多个开发人员可以签出和传输更改，然后每个更改都可以归因于特定的开发人员。 "),t("a",lt,[e("完整答案"),n(i)])]),at,t("p",null,[e("提交消息是 git 的一个组件，它在提交更改时显示。Git 提供了一个内容工具，可以在其中输入对提交所做的调整。 "),t("a",pt,[e("完整答案"),n(i)])]),ht,t("p",null,[e("有几个原因： 正确的活动将破坏最近保存在提交中的快递。如果只更改提交消息，那不是问题。但如果内容被修改，排除重要内容的机会仍然更大。滥用git commit- amends可能会导致小提交增加并获得不适当的更改。 "),t("a",ct,[e("完整答案"),n(i)])]),_t,t("p",null,[e("索引包含运行相关 git 命令后制定的 Shell 内容。例如，Git 将在运行提交后尝试执行提交后的内容。 "),t("a",gt,[e("完整答案"),n(i)])]),ut,t("p",null,[e("Git 是一个修正控制框架，一个处理源代码历史的工具。GitHub 是 Git 仓库的托管功能。GitHub 是一个网站，您可以在其中传输 Git 存档的副本。它是一个 Git 存储库托管服务，它提供了 Git 的大部分分布式更新控制和源代码管理 (SCM) 实用性，同时还包含了它的功能。 "),t("a",mt,[e("完整答案"),n(i)])]),dt,t("p",null,[e("Commit项包含以下部分；应该指定以下所有三个： 一组记录，表示给定时间目的的任务状况;对父提交对象的引用;一个 SHAI 名称，一个 40 个字符的字符串，用于唯一区分提交对象。 "),t("a",wt,[e("完整答案"),n(i)])]),bt,t("p",null,[e("这个问题是一个挑战，用 Git 来测试你的分支知识，告诉他们在过去的活动中是如何利用分支的，以及它的作用是什么，可以参考以下几点： 特征分支： 组件分支模型将特定元素的大部分更改保留在分支中。当项目通过自动化测试进行全面测试和批准时，该分支将融合到主分支中。 任务分支 在此模型中，每个分配都在其分支上实现，分支名称中包含承诺键。很难看出哪个代码实现了哪个任务，在分支名称中搜索任务键。 发布分支 一旦创建分支获得了足够的释放功能，就可以克隆该分支以构建发布分支。创建这个分支会开始下一个发布周期，因... "),t("a",ft,[e("完整答案"),n(i)])]),Gt,t("p",null,[e("要知道分支是否已合并到 master 中，可以使用以下命令： git branch -merged 记录已经合并到当前分支的分支。 git branch - no merge 记录没有被合并的分支。 "),t("a",vt,[e("完整答案"),n(i)])]),yt,t("p",null,[e("要修复任何混乱的提交，将使用git commit?correct命令。通过运行这个，可以在编辑器中设置被破坏的提交消息。 "),t("a",kt,[e("完整答案"),n(i)])]),qt,t("p",null,[e("以下是 Git 存储库托管功能： PikacodeVisual Studio OnlineGitHubGitEnterpriseSourceForge.netgitee.com "),t("a",St,[e("完整答案"),n(i)])]),Tt,t("p",null,[e("一些最适合 LINUX 的 GIT 客户端是： Git ColaSmart gitGit-gGit GUIGiggleqGit "),t("a",It,[e("完整答案"),n(i)])]),xt,t("p",null,[e("‘Subgit’ 是一个将 SVN 迁移到 Git 的工具。这是一个稳定且无压力的迁移。Subgit 是公司范围内从 SVN 迁移到 Git 的解决方案之一，即： Subgit比 git-svn 优越得多无需更改已放置的基础设施。Subgit允许使用所有 git 和所有子版本功能。Subgit提供无压力的迁移体验。 "),t("a",Ct,[e("完整答案"),n(i)])])])}const Bt=o(v,[["render",Vt],["__file","git-summary.html.vue"]]);export{Bt as default};
